
# toml 用 syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# dark powered 補完plugin
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
"{{{ "deoplete
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
inoremap <expr><S-tab> pumvisible() ? "\<C-p>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<S-tab>"

""" test
autocmd deinLocal FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd deinLocal FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd deinLocal FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd deinLocal FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd deinLocal FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" auto close preview window.
autocmd deinLocal CompleteDone * silent! pclose!

"}}}
'''

# vim でsnippet を使う用の plugin (framework?)
[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_ft = 'snippet'

# vim script 用補完 plugin
[[plugins]]
repo = 'Shougo/neco-vim'
on_i = 1
on_ft = 'vim'

# syntax file から補完候補を作成
[[plugins]]
repo = 'Shougo/neco-syntax'
on_i = 1

# https://github.com/Shougo/deoplete.nvim/wiki/Completion-Sources

# c言語用補完 plugin
[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_source = ['deoplete.nvim']
on_ft = 'c'

# python 用補完 plugin
[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_source = ['deoplete.nvim']
on_ft = 'python'

# vimの編集履歴を表示／適用してくれる plugin
[[plugins]]
repo = 'sjl/gundo.vim'
on_i = 1
hook_source = '''
" {{{ "Gundo
if has('python3')
    let g:gundo_prefer_python3 = 1
endif
nnoremap <silent> <Leader>u :GundoToggle<CR>
" }}}
'''

# vimからJupyter notebookを開く
[[plugins]]
repo = 'jupyter-vim/jupyter-vim'
on_ft = 'python'
hook_source = '''
" {{{
" $ jupyter console --generate-config
" => c.ZMQTerminalInteractiveShell.include_other_output = True
" $ jupyter qtconsole --generate-config
" => c.ConsoleWidget.include_other_output = True

" no mapping
let g:jupyter_mapkeys = 0

let s:l_jupyter_connect = 0
let s:jupyter_arg_list_raw = 'File Count Range Cell Code Cd'
function! s:jupyter_arg_list(arglead, cmdline, cursorpos) abort
    let jupyter_arg_list = split(s:jupyter_arg_list_raw, ' ')
    let arglead = tolower(a:arglead)
    let ret = filter(jupyter_arg_list, '!stridx(tolower(v:val), arglead)')
    return ret
endfunction

function! s:jupyter_connect_check() abort
    if s:l_jupyter_connect != 0
        " already connected
        return
    endif

    redir => jupyter_con_out
    JupyterConnect
    sleep 2
    redir END
    for l in split(jupyter_con_out, '\n')
        if stridx(l, 'Connected') != -1
            " already connected
            let s:l_jupyter_connect = 1
            return
        endif
    endfor

    if has('win32')
        silent !start /min jupyter qtconsole
    else
        !jupyter qtconsole &
    endif

    let yn = input('jupyter is already open?')
    JupyterConnect
    sleep 2
    let s:l_jupyter_connect = 1

endfunction

function! s:jupyter_wrapper(...) abort
    if a:0 == 0
        let jmode = 'File'
    else
        let jmode = a:1
    endif
    let mode_check = 0
    for mode_list in split(s:jupyter_arg_list_raw, ' ')
        if jmode == mode_list
            let mode_check = 1
        endif
    endfor
    if mode_check == 0
        echo 'incorrect argument'
        return
    endif

    call s:jupyter_connect_check()

    if jmode == 'File'
        JupyterRunFile
        return
    elseif jmode == 'Count'
        if a:0 >= 2
            let header = a:2
        else
            let header = ''
        endif
        execute header.'JupyterSendCount'
    elseif jmode == 'Range'
        if a:0 == 2
            let header = a:2
        elseif a:0 > 2
            let header = a:2.','.a:3
        else
            let header = ''
        endif
        execute header.'JupyterSendRange'
    elseif jmode == 'Cell'
        JupyterSendCell
    elseif jmode == 'Code'
        let send_code = ''
        for i in range(2,a:0)
            let send_code .= ' '.a:{i}
        endfor
        execute 'JupyterSendCode "'.send_code.'"'
    elseif jmode == 'Cd'
        if a:0 == 2
            let cdir = a:2
        else
            let cdir = ''
        endif
        execute 'JupyterCd '.cdir
    endif
endfunction

command! -nargs=* -complete=customlist,s:jupyter_arg_list Jupyter call s:jupyter_wrapper(<f-args>)
" }}}
'''

