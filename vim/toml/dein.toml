
# package 管理
[[plugins]]
repo = 'Shougo/dein.vim'

# neosnippet用のsnipets
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# file tree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
"""""NERDTree "{{{
"Bookmarkをデフォルト表示
let g:NERDTreeShowBookmarks=1
"見栄え
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable  = '>'
let g:NERDTreeDirArrowCollapsible = '!'
"右側に表示
let g:NERDTreeWinPos="right"

"参考:https://kamiya555.github.io/2015/10/14/nerdtree-command/
"local mapping
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>

"NERDTree color setting
highlight NERDTreeBookmarksLeader ctermfg=32 guifg=DeepSkyBlue3
highlight NERDTreeBookmark ctermfg=107 guifg=DarkOliveGreen3

"]でnerdtreeから抜け
"autocmd deinLocal FileType nerdtree nnoremap <buffer> <Esc> <c-w>p
"autocmd deinLocal FileType nerdtree nnoremap <buffer> ] <c-w>l <c-w>k
"}}}
'''

# コード実行plugin
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
""" vim-quick_run {{{
let g:quickrun_no_default_key_mappings = 1
function! <SID>my_quickrun()
    if &modified
        echo 'file is not saved.'
    else
        return ':QuickRun'
    endif
endfunction
" nnoremap <silent> <Leader>q :QuickRun<CR>
nnoremap <silent> <expr> <Leader>q <SID>my_quickrun().'<CR>'

let g:quickrun_config = get(g:, 'quickrun_config', {})  " 変数がなければ初期化

let g:quickrun_config.python = {
            \ 'command' : 'python3'
            \ }

function s:set_qrun_marp()
    let l:is_marp = 0
    for l:ln in getline(1, 5)
        if stridx(l:ln, 'marp') != -1
            let l:is_marp = 1
            break
        endif
    endfor
    if l:is_marp == 1
        " make prezantation by markdown [https://github.com/marp-team/marp-cli]
        if has('mac')
            let l:open_pdf = 'open %s:r.pdf'
        elseif has('win32')
            let l:open_pdf = 'start %s:r.pdf'
        else
            let l:open_pdf = 'evince %s:r.pdf'
        endif
        let g:quickrun_config.markdown = {
                    \ 'command' : 'npx',
                    \ 'exec' : ['%c \@marp-team/marp-cli %s --pdf --allow-local-files',l:open_pdf ],
                    \ }

        " --preview may not be supported anymore.
        if has('terminal') " || has('nvim')
            " http://chrome.half-moon.org/43.html
            if has('mac')
                let l:open_server = 'open -n -a Google\ Chrome --args -incognito http://localhost:8080/'
            elseif has('win32')
                let l:open_server = '"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --new-window --incognito http://localhost:8080/'
            else
                let l:open_server = 'firefox http://localhost:8080/'
            endif
            let g:quickrun_config.markdown = {
                        \ 'command' : 'npx',
                        \ 'exec' : [l:open_server, '%c \@marp-team/marp-cli --server %s:h'],
                        \ 'runner' : 'terminal',
                        \ 'runner/opener' : 'botright new',
                        \ }
        endif
    else
        if has('mac')
            let l:cmd = 'open'
            let l:exe = '%c %s -a Google\ Chrome'
        elseif has('win32')
            let l:cmd = 'start'
            let l:exe = '%c chrome %s'
        else
            let l:cmd = 'firefox'   " temporary
            let l:exe = '%c %s'
        endif
        let g:quickrun_config.markdown = {
                    \ 'command' : l:cmd,
                    \ 'exec' : l:exe
                    \}
    endif
endfunction
autocmd deinLocal FileType markdown call s:set_qrun_marp()

if has('mac')
    " macOSでlatex (ptex2pdf)を使う場合
    " https://texwiki.texjp.org/?quickrun
    "let g:quickrun_config.tex = {
    "            \ 'command' : 'ptex2pdf',
    "            \ 'exec' : ['%c -l -u -ot "-synctex=1 -interaction=nonstopmode" %s', 'open %s:r.pdf']
    "            \ }
    let g:quickrun_config.tex = {
                \ 'command' : 'ptex2pdf',
                \ 'exec' : ['%c -l %s -output-directory %s:h', 'open %s:r.pdf']
                \ }
endif
" }}}
'''

# 背景透過
[[plugins]]
repo = 'miyakogi/seiya.vim'
hook_add = '''
"""""seiya.vim "{{{
"vimの背景を透過
let g:seiya_auto_enable=1
"}}}
'''

# 関数一覧を表示
[[plugins]]
# repo = 'vim-scripts/taglist.vim'
repo = 'yegappan/taglist'
hook_add = '''
"""""taglist.vim "{{{
let g:Tlist_Exit_OnlyWindow = 1
let g:Tlist_Show_One_File = 1
let g:Tlist_File_Fold_Auto_Close = 1
" 幅の設定
" gui offのときは自動で幅が変わらないようにする (バグる)
if has('gui_running')
    let s:Max_WinWidth = 45
    let g:Tlist_Inc_Winwidth = 1
else
    let s:Max_WinWidth = 35
    let g:Tlist_Inc_Winwidth = 0
endif

"<space>をlocal用のmappingにする。
"nnoremap <silent> <Leader>t :Tlist<CR>

function! Open_taglist()
    if exists('g:Tlist_Use_Right_Window')
        let l:tlist_right_old = g:Tlist_Use_Right_Window
    else
        let l:tlist_right_old = 0
    endif
    " guiの時はいらないかも？↓
    if winwidth(winnr()) > s:Max_WinWidth*2
        let g:Tlist_WinWidth = s:Max_WinWidth
    else
        let g:Tlist_WinWidth = (winwidth(winnr())/11)*5
    endif

    if (winnr()==1 ) || (winnr() != winnr("$"))
        let g:Tlist_Use_Right_Window = 0
    else
        let g:Tlist_Use_Right_Window = 1
    endif

    " 右側で表示して閉じた際にwinnrが変わる問題対応
    let winnr = -1
    if &filetype != 'taglist'
        let winnr = winnr()
        if getbufvar(tabpagebuflist()[0], '&filetype') == 'taglist'
            let winnr -= 1
        endif
    endif

    TlistToggle

    " when tablist is closed
    if (getbufvar(tabpagebuflist()[0], '&filetype') != 'taglist') &&
        \ (getbufvar(tabpagebuflist()[-1], '&filetype') != 'taglist')
        if winnr != -1
            execute winnr . 'wincmd w'
        endif
    endif
    let g:Tlist_Use_Right_Window = l:tlist_right_old
endfunction
nnoremap <silent> <Leader>t :call Open_taglist()<CR>
"}}}
'''

# project内のファイル検索
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
""""ctrlp{{{
"nnoremap <leader>s :<C-U>CtrlP<CR>
let g:ctrlp_map = '<leader>s'
"}}}
'''

# project内の関数検索
[[plugins]]
repo = 'MeF0504/mftags'
hook_add = '''
"""""mftags{{{
let g:mftag_auto_close = 1
let g:mftag_dir_auto_set = 1
let g:mftag_c_setting = {'syntax':'cdfgstu', 'func':'cdfgstu'}
let g:mftag_python_setting = {'tag':'cfv'}
let g:mftag_popup_on=0
let g:mftag_exe_option = '-R --exclude="tmp/*"'

nnoremap <silent> <Leader>m :MFfunclist<CR>

function! s:AddPath()
    if exists("b:mftag_save_dir")
        if b:mftag_save_dir != "/"
            let l:save_dir = substitute(b:mftag_save_dir, " ", "\\\\ ", "")
            execute "set path+=" . l:save_dir . "**/include"
        endif
    endif
endfunction
autocmd deinLocal BufRead * call s:AddPath()

" GREgrep wrapper
if exists('*Mygrep') == 1
    function! s:gregrep_wrapper(...)
        if a:0 == 1
            if (!(match(a:1, 'wd=')+1) && !(match(a:1, 'ex=')+1) && !(match(a:1, 'dir=')+1))
                " no arguments
                call Mygrep('-h')
                return
            endif

            let res = a:1
            let st = match(a:1, 'dir=')
            if st == -1
                let res .= ' dir=' . MFsearch_dir(g:mftag_dir)
            endif
        else
            let res = ' dir=' . MFsearch_dir(g:mftag_dir)
        endif
        execute 'call ' . 'Mygrep("' . res . '")'
    endfunction
    command! -nargs=? GREgrep call s:gregrep_wrapper(<f-args>)
endif

"}}}
'''

# joke command
[[plugins]]
repo = 'MeF0504/sl.vim'

# colorscheme
[[plugins]]
repo = 'ciaranm/inkpot'

# colorscheme
[[plugins]]
repo = 'MeF0504/vim-monoTone'

# colorscheme
[[plugins]]
repo = 'MeF0504/vim-shiki'

# current lineの関数表示用plugin (StatusLine用)
[[plugins]]
repo = 'tyru/current-func-info.vim'
hook_add = '''
"""" current-func-info.vim {{{
" let s:cfi_st = "[%{cfi#get_func_name()}] "
let s:cfi_st = "%#StatusLineCFI# %{cfi#get_func_name()} "
function! <SID>add_cfi_sl()

    function! s:clear_cfi_sl()
        let l:st_tmp = g:l_statusline
        let g:l_statusline = []
        for i in range(len(l:st_tmp))
            if i!=2
                let g:l_statusline += [l:st_tmp[i]]
            endif
        endfor
    endfunction

    " support file type: c, pc++, ython, 
    if ((&filetype != 'c') &&
       \(&filetype != 'cpp') &&
       \(&filetype != 'python')
       \)
        if g:l_statusline[2] == s:cfi_st
            call s:clear_cfi_sl()
        endif
        return
    endif
    " if file is long enough, don't show in statusline.
    if line('$') > 10000
        if g:l_statusline[2] == s:cfi_st
            call s:clear_cfi_sl()
        endif
        return
    endif

    " do nothing if already set.
    if g:l_statusline[2] == s:cfi_st
        return
    endif

    let l:st_tmp = g:l_statusline
    let g:l_statusline = []
    for i in range(len(l:st_tmp))
        if i == 2
            let g:l_statusline += [s:cfi_st]
            let g:l_statusline += [l:st_tmp[i]]
        else
            let g:l_statusline += [l:st_tmp[i]]
        endif
    endfor
endfunction

autocmd deinLocal BufEnter * call <SID>add_cfi_sl()
" }}}
'''

# StatusLineにお寿司を流すplugin
[[plugins]]
repo = 'pocke/sushibar.vim'
hook_add = '''
""" sushibar.vim {{{
let s:sushi = 1
if ((exists("g:l_bd_month") && (str2nr(strftime("%b")) == g:l_bd_month))
    \&& (exists("g:l_bd_day") && (str2nr(strftime("%d")) == g:l_bd_day)) )
    "" Birthday
    if s:sushi == 1
        autocmd deinLocal BufWinEnter *
                \ highlight StatusLine ctermfg=233 ctermbg=246 guifg=Grey7 guibg=Grey58
                \ | highlight WildMenu ctermfg=246 ctermbg=233 guifg=Grey58 guibg=Grey7
                \ |  Sushibar
    endif
endif
""" }}}
'''

# 検索時にhit数をcountしてくれるplugin
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
""" vim-anzu {{{
" max search count
let g:anzu_search_limit = 3000
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)

" clear status
nmap <ESC><ESC> <Plug>(anzu-clear-search-status)
" }}}
'''

# if - endif 等を補完してくれるplugin
[[plugins]]
repo = 'tpope/vim-endwise'
hook_add = '''
""" endwise {{{
autocmd deinLocal FileType html
        \ let b:endwise_addition = '\=submatch(0)=="html" ? "\</html\>" : submatch(0)=="head" ? "\</head\>" : submatch(0)=="body" ? "\</body\>" : submatch(0)=="script" ? "\</script\>" : "\</style\>"' |
        \ let b:endwise_words = 'html,head,body,script,style' |
        \ let b:endwise_syngroups = 'htmlTagName,htmlSpecialTagName'
" https://github.com/tpope/vim-endwise/issues/83
autocmd deinLocal FileType tex
        \ let b:endwise_addition = '\="\\end" . matchstr(submatch(0), "{.\\{-}}")' |
        \ let b:endwise_words = 'begin' |
        \ let b:endwise_pattern = '\\begin{.\{-}}' |
        \ let b:endwise_syngroups = 'texSection,texBeginEnd,texBeginEndName,texStatement'
"}}}
'''

# window のresize, 移動用plugin
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
""" sinresizer {{{
let g:winresizer_finish_with_escape = 0
let g:winresizer_start_key = '<leader>w'
let g:winresizer_vert_resize = 5
let g:winresizer_horiz_resize = 2
""" }}}
'''

# git 操作用plugin
[[plugins]]
repo = 'tpope/vim-fugitive'
# https://qiita.com/tashua314/items/35521f9bada5fe00cca7
hook_add = '''
""" fugitive {{{
autocmd deinLocal FileType fugitive* nnoremap <silent> <buffer> q :quit<CR>
""" }}}
'''

# vim の document
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
if = '''! has('nvim')'''
hook_add = '''
" {{{
" https://gorilla.netlify.app/articles/20190427-vim-help-jp.html
" helpを日本語優先にする
set helplang=ja
" }}}
'''

# colorscheme
[[plugins]]
repo = 'altercation/vim-colors-solarized'

# command line と検索時に補完してくれるplugin
[[plugins]]
repo = 'gelguy/wilder.nvim'
hook_add = '''
" {{{
" from https://github.com/gelguy/wilder.nvim
call wilder#enable_cmdline_enter()

set wildcharm=<Tab>
cmap <expr> <TAb> wilder#in_context() ? wilder#next() : "\<Tab>"
cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

" 検索時のみ補完する
call wilder#set_option('modes', ['/', '?'])
" }}}
'''

# colorscheme
[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

# colorscheme
# [[plugins]]
# repo = 'google/vim-colorscheme-primary'

# colorscheme
[[plugins]]
repo = 'fxn/vim-monochrome'

# for deoplete
# vim でneovim 用 pluginを動かすためのplugin
[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

# for deoplete
# vim でneovim 用 pluginを動かすためのplugin
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''

# visual modeで選択した範囲をgcでコメントアウトしてくれるplugin
[[plugins]]
repo = 'tpope/vim-commentary'

