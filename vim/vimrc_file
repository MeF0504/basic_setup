"vimrcを再読込する際にautocmdが重複しないようにautocmdをすべて解除
augroup local
    autocmd!
augroup END

"windiws, unix系で分岐
if has('win32')
    let s:vimdir = expand('~/vimfiles/')
else
    let s:vimdir = expand('~/.vim/')
endif

""##########基本設定
"左端に数字を表示
set number
"常にステータスラインを表示
set laststatus=2
"カーソルの位置を表示
set ruler
"コマンドラインの画面上の行数
set cmdheight=2
"文の折り返し
set wrap
"タイトルを非表示
set notitle
"viとの互換性をとらない
set nocompatible
"タブの幅
set tabstop=4
"自動でインデントを挿入
set autoindent
"オートインデントの幅
set shiftwidth=4
"文字の色づけ
syntax on
"検索したときにハイライト
set hlsearch
"右下に入力コマンドを表示
set showcmd
"バックスペースのノーマルモード、(改行、)オートインデントへの有効化
set backspace=start,indent
"set backspace=start,eol,indent
"挿入モードでのマウスの有効化
set mouse=i
"全モードでのマウスの有効化
"set mouse=a
"タブをスペースに変換
set expandtab
"連続した空白でtabやback spaceが動く幅
set softtabstop=4
"日本語OKに
set fileencoding=utf-8
"大文字、小文字を区別しない
set ignorecase
"検索文字に大文字があると区別する
set smartcase
"タブとかを可視化?
"set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
"clipboardとyankを共有 (+clipboardが条件)
"set clipboard+=unnamed
"検索のときに移動しない
set noincsearch
"カーソルが上下５行に行ったらスクロール
set scrolloff=5

"let g:hybrid_use_Xresources = 1
"colorscheme hybrid
"全角スペース表示
hi ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

"カーソルの下に下線を表示
set cursorline

"swp fileあり、backup, undoなし
set swapfile
execute "set directory=" . s:vimdir . "swp"
set nobackup
set noundofile

"vimgrepした際に新規windowで開くようにする
autocmd local QuickFixCmdPost *grep* cwindow

"誤って使うとまずいkeymapを削除
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>

"使いやすいようにmapping
nnoremap s <c-w>
nnoremap T :tabnew

"ヘッダーファイルをタブで開く
nnoremap gf <c-w>gf

"検索pathを追加
set path+=../include
if exists("$PYTHONPATH")
    set path+=$PYTHONPATH
endif
if exists("$LD_LIBRARY_PATH")
    set path+=$LD_LIBRARY_PATH
endif

""##########作成関数とか
"ls in vim
command! LS 0tabnew .

"Execute python script Ctrl-P
function! s:ExecPy()
    exe "!" . &ft . " %"
    :endfunction
    command! Exec call <SID>ExecPy()
    autocmd local FileType python map <silent> <C-P> :call <SID>ExecPy()<CR>

""##########ファイル読み込み
"pluginの設定読み込み
if isdirectory(s:vimdir . 'plugin')
    execute "source " . s:vimdir . "rcdir/vimrc.plugin"
endif

"dein directoryがあれば読み込み
if isdirectory(s:vimdir . 'dein')
    execute "source " . s:vimdir . "rcdir/vimrc.dein"
endif

"local設定ファイル
let s:localrc = s:vimdir . 'rcdir/vimrc.mine'
if filereadable(s:localrc)
    execute "source " . s:localrc
endif

"カラーの変更
if filereadable(s:vimdir . "colors/inkpot.vim") && !has('gui_running')
    colorscheme inkpot
    execute "source " . s:vimdir . "rcdir/vimrc.color"
else
    colorscheme desert
endif
