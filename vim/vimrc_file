"vimrcを再読込する際にautocmdが重複しないようにautocmdをすべて解除
augroup local
    autocmd!
augroup END

"windiws, unix系で分岐
if has('win32')
    let g:vimdir = expand('~/vimfiles/')
else
    let g:vimdir = expand('~/.vim/')
endif

""##########基本設定
"左端に数字を表示
set number
"常にステータスラインを表示
set laststatus=2
"カーソルの位置を表示
set ruler
"コマンドラインの画面上の行数
set cmdheight=2
"文の折り返し
set wrap
"タイトルを非表示
set notitle
"viとの互換性をとらない
set nocompatible
"タブの幅
set tabstop=4
"自動でインデントを挿入
set autoindent
"オートインデントの幅
set shiftwidth=4
"文字の色づけ
syntax on
"検索したときにハイライト
set hlsearch
"右下に入力コマンドを表示
set showcmd
"バックスペースのノーマルモード、(改行、)オートインデントへの有効化
set backspace=start,indent
"set backspace=start,eol,indent
"挿入モードでのマウスの有効化
set mouse=i
"全モードでのマウスの有効化
"set mouse=a
"タブをスペースに変換
set expandtab
"連続した空白でtabやback spaceが動く幅
set softtabstop=4
"日本語OKに
set encoding=utf-8
set fileencoding=utf-8
"大文字、小文字を区別しない
set ignorecase
"検索文字に大文字があると区別する
set smartcase
"タブとかを可視化?
"set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
"clipboardとyankを共有 (+clipboardが条件)
"set clipboard+=unnamed
"検索のときに移動しない
set noincsearch
"カーソルが上下５行に行ったらスクロール
set scrolloff=5

"let g:hybrid_use_Xresources = 1
"colorscheme hybrid
"全角スペース表示
hi ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

"カーソルの下に下線を表示
set cursorline

"swp fileあり、backup, undoなし
set swapfile
execute "set directory=" . g:vimdir . "swp"
set nobackup
set noundofile

"grepコマンドで内部grep(vimgrep)を使う
set grepprg=internal
"vimgrepした際に新規windowで開くようにする
autocmd local QuickFixCmdPost *grep* cwindow

"誤って使うとまずいkeymapを削除
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Q <Nop>

"Insert modeを抜けるときにIME off ※ssh先ではhostのを変えるので意味なし
if has("win32")
    inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
endif

"macでinsert modeから抜けるときにIME off
"参考：https://rcmdnk.com/blog/2017/03/10/computer-mac-vim/
if has('mac')
	let g:imeoff = 'osascript -e "tell application \"System Events\" to key code 102"'
	autocmd local InsertLeave * :call system(g:imeoff)
endif
set ttimeoutlen=1

"使いやすいようにmapping
nnoremap s <c-w>
nnoremap T :tabnew
nnoremap <silent> co :copen<CR>
nnoremap <silent> cc :cclose<CR>
nnoremap / /\v

"shiftは逆動作だと思ってるので、単語移動をremap
noremap W b
noremap gw W
noremap gW B
noremap E ge
noremap ge E

"ヘッダーファイルをタブで開く
nnoremap gf <c-w>gf

"新規windowで開いたとき、escでもとのwindowに戻る
autocmd local Filetype qf nnoremap <buffer> <Esc> <c-w>p
"terminal上だと矢印キーでの挙動がおかしくなるので、強制的にmapping
"入力方法はc-vから矢印
nnoremap OA k
nnoremap OB j
nnoremap OD h
nnoremap OC l

"検索pathを追加
set path+=../include
if exists("$LD_LIBRARY_PATH")
    set path+=$LD_LIBRARY_PATH
endif

""##########作成関数とか
"ls in vim
command! LS 0tabnew .

"単語のハイライト情報をget
"from http://cohama.hateblo.jp/entry/2013/08/11/020849
function! s:get_syn_id(transparent)
  let synid = synID(line("."), col("."), 1)
  if a:transparent
    return synIDtrans(synid)
  else
    return synid
  endif
endfunction
function! s:get_syn_attr(synid)
  let name = synIDattr(a:synid, "name")
  let ctermfg = synIDattr(a:synid, "fg", "cterm")
  let ctermbg = synIDattr(a:synid, "bg", "cterm")
  let guifg = synIDattr(a:synid, "fg", "gui")
  let guibg = synIDattr(a:synid, "bg", "gui")
  return {
        \ "name": name,
        \ "ctermfg": ctermfg,
        \ "ctermbg": ctermbg,
        \ "guifg": guifg,
        \ "guibg": guibg}
endfunction
function! s:get_syn_info()
  let baseSyn = s:get_syn_attr(s:get_syn_id(0))
  echo "name: " . baseSyn.name .
        \ " ctermfg: " . baseSyn.ctermfg .
        \ " ctermbg: " . baseSyn.ctermbg .
        \ " guifg: " . baseSyn.guifg .
        \ " guibg: " . baseSyn.guibg
  let linkedSyn = s:get_syn_attr(s:get_syn_id(1))
  echo "link to"
  echo "name: " . linkedSyn.name .
        \ " ctermfg: " . linkedSyn.ctermfg .
        \ " ctermbg: " . linkedSyn.ctermbg .
        \ " guifg: " . linkedSyn.guifg .
        \ " guibg: " . linkedSyn.guibg
endfunction
command! SyntaxInfo call s:get_syn_info()

""##########file, directory変数
let g:cfile = expand("%:p")
let g:cdir = expand("%:p:h")

""##########ファイル読み込み
"dein directoryがあれば読み込み
if isdirectory(g:vimdir . 'dein')
    execute "source " . g:vimdir . "rcdir/vimrc.dein"
endif

"pluginの設定読み込み
if isdirectory(g:vimdir . 'plugin') || isdirectory(g:vimdir . 'dein')
    execute "source " . g:vimdir . "rcdir/vimrc.plugin"
endif

"local設定ファイル
let s:localrc = g:vimdir . 'rcdir/vimrc.mine'
if filereadable(s:localrc)
    execute "source " . s:localrc
endif

"言語毎の設定
autocmd local FileType python execute "source " . g:vimdir . "rcdir/python.vim"
autocmd local FileType vim execute "source " . g:vimdir . "rcdir/vim.vim"

"カラーの変更
if filereadable(g:vimdir . "colors/inkpot.vim") && !has('gui_running')
    colorscheme inkpot
    execute "source " . g:vimdir . "rcdir/vimrc.color"
else
    colorscheme desert
endif
