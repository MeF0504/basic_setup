*meflib.txt*    local library of vim script. 色々あって日本語／英語混在
both Japanese and English
vimは1行目にマルチバイトがあるかどうかでエンコーディングを判別するらしい
|E670| *meflib.jax*

==============================================================================
CONTENTS                                                       *meflib-contents*

Introduction	|meflib-introduction|
Commands	|meflib-commands|
Functions	|meflib-functions|
Options		|meflib-options|
Memo		|meflib-memo|
License		|meflib-license|

==============================================================================
INTRODUCTION                                               *meflib-introduction*

local library of vim scripts for Mef0504 (https://github.com/MeF0504)

==============================================================================
COMMANDS                                                       *meflib-commands*

DiffOrig                                                             *:DiffOrig*

See |diff-original-file|

Diff {filename}                                                          *:Diff*

Check the difference between current file and {filename}.

SearchConf                                                         *:SearchConf*

Search the conflict strings.
Conflict strings are following; >
	<<<<<<<
	=======
	>>>>>>>
<

Spell                                                                   *:Spell*

Toggle 'spell'.

FileInfo                                                             *:FileInfo*

Show the information of current file.
Python support is required.

EijiroWeb {word}                                                    *:EijiroWeb*

Search the {word} in the eijiro web page (https://eowf.alc.co.jp/).

Ctags                                                                   *:Ctags*

Execute ctags command.
Also see |meflib-opt-ctags_opt|.

JobStatus                                                           *:JobStatus*

Show the job status.

BinMode                                                               *:BinMode*

Set the current file as a bin file and move to bin mode.
Also refer |using-xxd|.

Terminal [-win X] [-term term_name] [commands]                       *:Terminal*

Wrapper of terminal command.

	[-win] take a character;
		S: open the terminal window in a horizontal split window.
		V: open the terminal window in a vertical split window.
		F: open the terminal window in a new tab window.
		P: open the terminal window in a popup/floating split window.
	[-term] is specified, focus the specified buffer.

Also see |meflib-opt-term_default|.

DiffLine {args1} {args2}                                             *:DiffLine*

Show the difference between {args1} and {args2}.
The format of each args is >
	[filename:]start_line[-end_line]
<
filename should be in buffer.
start_line and end_line are number, start_line < end_line.

Gregrep [-wd=WORD] [-dir=DIR] [ex=EXT]                                *:Gregrep*

Wrapper of grep command.
	-wd: set searching strings (default: current word).
		<word> searches as word.
	-dir: set the parent directory. (default: top directory of the project
	of the current file or parent directory of
		the current file.)
	-ex: set the file extension (default: extension of current file).
		if -ex=None, no file is excluded.

XPMLoader                                                           *:XPMLoader*

Test command to set highlights of xpm file.

MefShowVar                                                         *:MefShowVar*

Show all local variables. See |meflib-options|.

Echo {option}                                                            *:Echo*

Expand echo command. Available options are;
	- pand str
		wrapper of :echo expand("str")
	- env ENV
		echo the environmental variable with easy to seeing format.
	- runtime
		echo the runtime path.
	- conv10 number
		convert the number to decimal number.
	- conv8 number
		convert the number to octal number.
	- conv2 number
		convert the number to binary number.
	- conv16 number
		convert the number to hexadecimal number.
	- time time
		convert a integer <-> a date format.
		acceptable date formats are "YYYY/MM/DD" or 
		"YYYY/MM/DD:hh-mm-ss".

BufOpen[!]                                                            *:BufOpen*

Select and open a buffer.

==============================================================================
FUNCTIONS                                                     *meflib-functions*

meflib#set({opt_name}, [sub_opt_name], {value})                   *meflib#set()*

Set the {value} of {opt_name}. If {sub_opt_name} is specified, the
{value} of the {sub_opt_name} key in the {opt_name} is set.
See |meflib-options| for available options.

meflib#get({opt_name}, [sub_opt_name], {default})                 *meflib#get()*

Return the item of {opt_name}. If {sub_opt_name} is specified, Get the item if
{opt_name}[{sub_opt_name}]. 
If {opt_name} or {sub_opt_name} does not exist, return {default}.

meflib#add({opt_name}, {value})                                   *meflib#add()*

Add {value} to |list| of {opt_name}. If {opt_name} does not exist, make the list.

meflib#basic#get_conf_dir()                        *meflib#basic#get_conf_dir()*

Return the user local configuration directory.

meflib#basic#analythis_args_eq({args})        *meflib#basic#analythis_args_eq()*

A function to analyze the arguments of a command. This function analyze the
arguments like >
	:Command key1=val2 key2=val2
<
{args} is the string of argument of the command, that is gotten by |<f-args>|.
Return value is the |dict| which keys are key1, key2, ... and item of each key
is val1, val2, ...

                                             *meflib#basic#analythis_args_hyp()*
meflib#basic#analythis_args_hyp({args}, {config})

A function to analyze the arguments of a command. This function analyze the
arguments like >
	:Command -key1 val2 -key2 val2
<
{args} is the string of argument of the command, that is gotten by |<f-args>|.
{config} is used to set the number of arguments as following. >
	let config = {'key1': 1, 'key2': 3}
<
Return value is the |dict| keys are key1, key2, ... and item of each key is
|list| of values. "no_opt" key is also returned, which contains arguments with
no key.

meflib#basic#get_top_dir({directory})               *meflib#basic#get_top_dir()*

Return the project-top directory relative to the {directory}. "project-top
directory" means the directory containing .git/.svn directory.

meflib#basic#get_exe_cmd([{command}])               *meflib#basic#get_exe_cmd()*

If called with no arguments, return system commands; "start" for Windows,
"open" for macOS, and "xdg-open" for Linux. If {command} is specified, return
the command path if {command} is executable. Otherwise return empty string.

meflib#basic#get_hi_info({group_name}, {keys})      *meflib#basic#get_hi_info()*

Return the highlight setting of {group_name}. {keys} is a string or list of
strings to return the setting. e.g. >
	echo meflib#basic#get_hi_info('Comment', 'gui')
	" ['italic']
	echo meflib#basic#get_hi_info('Number', ['ctermfg', 'guifg'])
	" ['9', 'Red']
<
                                                        *meflib#floating#open()*
meflib#floating#open({bufid}, {winid}, {str_list}, {config})

Wrapper function to create and open floating/popup window. For initialization,
set {bufid}=-1 and {winid}=-1. This function return the list of {bufid} and
{winid}. To update the strings of the window, you recall this function with
these returned values.
See |meflib-floating-config| for available configuration items.

meflib#floating#close({winids})                        *meflib#floating#close()*

Wrapper function to close floating/popup window.

meflib#floating#close_all()                        *meflib#floating#close_all()*
Close all floating/popup windows opened by |meflib#floating#open()|.

                                                      *meflib#floating#select()*
meflib#floating#select({str_list}, {config}, {callback})

Wrapper function to create and open floating/popup select menu. This works
almost same as |popup_menu| of vim.
{config} is same as |meflib#floating#open()|. See |meflib-floating-config| for
available configuration items.

ShowStatusLineBG()                                          *ShowStatusLineBG()*

Show the color configuration of |status-line|.

==============================================================================
OPTIONS                                                         *meflib-options*

auto_ime_off                                               *meflib-auto_ime_off*
	type: number
	default: 0
If set 1, turn off the IME/Japanese input automatically when leave the insert
mode.

birthday                                                       *meflib-birthday*
	type: list of number
	default: [0, 0]
Set the birthday; [month, day]. This is refered by day-by-day statusline
color.


cfi_on                                                           *meflib-cfi_on*
	type: number
	default: 0
If set 1, show the result of |cfi.txt| at the top line.

colorscheme                                                 *meflib-colorscheme*
	type: string
	default: "evening"
Set the default color scheme.

ctags_opt                                                     *meflib-ctags_opt*
	type: string
	default: ""
Options of ctags command.

del_commands                                               *meflib-del_commands*
	type: list of strings
Commands deleted after entering the vim.
Using |meflib#add| is recommended. >
	call meflib#add('del_commands', 'Hoge')
<

get_top_dir                                                 *meflib-get_top_dir*
	type: number
	default: 0
If set 1, use top directory as a default directory in some commands.
Currently this values is referred by Gregrep.

insert_plugins                                           *meflib-insert_plugins*
	type: list of plugin names
Set plugins loaded after entering insert mode.
Using |meflib#add| is recommended. >
	call meflib#add('insert_plugins', 'Hoge')
<

lazy_plugins                                               *meflib-lazy_plugins*
	type: list of plugin names
Set plugins loaded after entering vim.
Using |meflib#add| is recommended. >
	call meflib#add('lazy_plugins', 'Hoge')
<

load_plugin                                                 *meflib-load_plugin*
	type: dict
An option to check that plugins/functions are able to load.
To set this option, {sub_opt_name} is available; >
	call meflib#set('load_plugin', 'nerdfont', 1)
<
Currently following {sub_opt_name} are used;
	- denops
	- deoplete
	- hitspop
	- nerdfont

my_color_set                                               *meflib-my_color_set*
	type: dict
An option to set functions overwriting highlights of color scheme. e.g. >
	call meflib#set('my_color_set', 'inkpotter', expand('<SID>').'my_color_set_inkpotter')
<

plugin_his                                                   *meflib-plugin_his*
	type: list of plugin names
An option to set plugin highlights. e.g. >
	call meflib#add('plugin_his', expand('<SID>').'plug_his')
<

qrun_finished                                             *meflib-qrun_finished*
	type: number
	default: 0
An option used in .qrun_conf.vim file. If this option is set 1, QuickRun is
already run. Sample; >
	let make_file = findfile('Makefile', expand('%:p:h')..';')
	if !empty(make_file)
	    let q_config = {
	                \ 'command': 'make',
	                \ 'exec' : '%c',
	                \ }
	    call quickrun#run(q_config)
	    call meflib#set('qrun_finished', 1)
	else
	    call meflib#set('qrun_finished', 0)
	endif
<

show_cwd_tab                                               *meflib-show_cwd_tab*
	type: number
	default: 1
If set 1, show the current working directory at tab line.

st_per_type                                                 *meflib-st_per_type*
	type: string
	default: ""
Set the type of percentage at status line. Currently "clock", "moon", and
"battery". Nerd fonts (https://www.nerdfonts.com) and nerdfont in
|meflib-load_plugin| is required.

statusline                                                   *meflib-statusline*
	type: dict
Set the configuration of status line. Possible keys are
	- "_": default status line.
	- "qf": status line for quickfix window.
	- "off": status line for nonactive window.
	- else(number): status line for narrow window. The key value is
	  accounted as the max width of the window.

tab_debug                                                     *meflib-tab_debug*
	type: number
	default: 0
If set 1, debug mode of 'tabline' is on.

tabinfo                                                         *meflib-tabinfo*
	type: str
An option storing the debug message of 'tabline'. This is automatically set if
|meflib-tab_debug| = 1.

tabline_footer                                           *meflib-tabline_footer*
	type: function name or |Funcref|
	default: ""
An option to set additional message in tab line. The return values of this
function is set of message and length of message. >
	function! AddTab() abort
		let message = "%#TabHighlight# message %#TabLineFill#"
		let len = 9 " length of ' message '
		return [message, len]
	endfunction
<
==============================================================================
MEMO                                                               *meflib-memo*
##### shortcut comment
<c-h> ... backspace <c-m> ... Enter
<c-i> ... tab <c-j> ... Down

##### useful command
|:set|          ... Show all options that differ from their default value.
|:set| all      ... Show all but terminal options.
|:set| termcap  ... Show all terminal options.
|:map|          ... Show all mapping settings.
|:highlight|    ... Show all highlight settings.
|:command|       ... Show all user commands.

##### spell check
information; |spell| or https://vim-jp.org/vimdoc-ja/spell.html
on; `:setlocal spell spelllang=en_us`
search;
次を検索 |]s| or |]S|
前を検索 |[s| or |[S|
(カーソル下を)正しい(good)単語として登録      |zg| or |:spe|[llgood] {word}
(カーソル下を)間違った(wrong)単語として登録   |zw| or |:spellw|[rong] {word}
(カーソル下の?)単語を一覧から削除             |zuw| / |zug| / |:spellu|[ndo] {word}

##### other topics
about command args... <f-args>=string, <args>=value
about equation operator ...  (sorry for Japanese)
  |==#|, |!=#|, |>#| etc..    ：大文字小文字を区別する
  |==?|, |!=?|, |>?| etc..    ：大文字小文字を区別しない
  |=~|, |=~#|, |=~?|          ：正規表現マッチ
  |!~|, |!~#|, |!~?|          ：正規表現非マッチ
正規表現については |pattern-overview| or https://vim-jp.org/vimdoc-ja/pattern.html#pattern-overview
about SID
|:scriptnames|          ... List all sourced script names
:echo expand('<SID>') ... Get the current file SID
:filter {str} {cmd} ... restrict the output.

about <Cmd>
mapping でcmd modeに移るときは : よりも <Cmd> の方が良さそう
|map-cmd|
使用できるのは ver. 8.2 && patch-1978 以降

コマンド補完の結果を取得するには
|getcompletion()|
これは？入力補完を自作する時用かな
|complete()|

==============================================================================
LICENSE                                                         *meflib-license*

The MIT License (https://github.com/MeF0504/basic_setup/blob/master/LICENSE)

vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
