*meflib.txt*    local library of vim script. 色々あって日本語／英語混在
both Japanese and English
vimは1行目にマルチバイトがあるかどうかでエンコーディングを判別するらしい
|E670| *meflib.jax*

==============================================================================
CONTENTS                                                       *meflib-contents*

Introduction	|meflib-introduction|
Commands	|meflib-commands|
Functions	|meflib-functions|
Options		|meflib-options|
Memo		|meflib-memo|
License		|meflib-license|

==============================================================================
INTRODUCTION                                               *meflib-introduction*

local library of vim scripts for Mef0504 (https://github.com/MeF0504)

==============================================================================
COMMANDS                                                       *meflib-commands*

DiffOrig                                                             *:DiffOrig*

See |diff-original-file|

Diff {filename}                                                          *:Diff*

Check the difference between current file and {filename}.

SearchConf                                                         *:SearchConf*

Search the conflict strings.
Conflict strings are following; >
	<<<<<<<
	=======
	>>>>>>>
<

Ipython                                                               *:Ipython*

run ipython in new tab.

Ipython3                                                             *:Ipython3*

run ipython3 in new tab.

Spell                                                                   *:Spell*

Toggle 'spell'.

FileInfo [file]                                                      *:FileInfo*

Show the information of the [file].
If [file] is not specified, show the information of the current file.
Python support is required.

EijiroWeb {word}                                                    *:EijiroWeb*

Search the {word} in the eijiro web page (https://eowf.alc.co.jp/).

Ctags                                                                   *:Ctags*

Execute ctags command.
Also see |meflib-opt-ctags_opt|.

JobStatus                                                           *:JobStatus*

Show the job status.

BinMode                                                               *:BinMode*

Set the current file as a bin file and move to bin mode.
Also refer |using-xxd|.

Terminal [-term term_name] [commands]                                *:Terminal*

Wrapper of terminal command.

	[-term] is available to focus on the already opened terminal buffer.
	If [-term] is not specified, [commands] is available to run commands on
	the terminal.

DiffLine {args1} {args2}                                             *:DiffLine*

Show the difference between {args1} and {args2}.
The format of each args is >
	[filename:]start_line[-end_line]
<
filename should be in buffer.
start_line and end_line are number, start_line < end_line.

Gregrep [-wd WORD] [-dir DIR] [-ex EXT] [-all]                        *:Gregrep*

Wrapper of grep command.
	-wd: set searching strings (default: current word).
		<word> searches as word.
	-dir: set the parent directory. (default: top directory of the project
	of the current file or parent directory of
		the current file.)
	-ex: set the file extension (default: extension of current file).
		if -ex=None, no file is excluded.
	-all: if set, hidden directories are included to search.
		Hidden directories are set by "exclude_dirs" option.

XPMLoader                                                           *:XPMLoader*

Test command to set highlights of xpm file.

MefShowVar [var]                                                   *:MefShowVar*

Show all local variables. See |meflib-options|.
If {var} is specified, show the details of {var}.

Echo {option}                                                            *:Echo*

Expand echo command. Available options are;
	- pand str
		wrapper of :echo expand("str")
	- env ENV
		echo the environmental variable with easy to seeing format.
	- runtime
		echo the runtime path.
	- conv10 number
		convert the number to decimal number.
	- conv8 number
		convert the number to octal number.
	- conv2 number
		convert the number to binary number.
	- conv16 number
		convert the number to hexadecimal number.
	- time time
		convert a integer <-> a date format.
		acceptable date formats are "YYYY/MM/DD" or
		"YYYY/MM/DD:hh-mm-ss".

BufOpen[!]                                                            *:BufOpen*

Select and open a buffer.

CmdOut {command}                                                       *:CmdOut*

get the output of {command} and put it in the temporary buffer.
If {command} starts with ':', it is treated as the vim command.
Otherwise, it is treated as the shell command.

TagFuncAll [option]                                                *:TagFuncAll*

Show all variables/functions/etc. got from tag files.
You select shown kinds before open the quickfix window.
'all' shows all items got from tag files.
Available options are:
	kinds
		show all kinds available from this file type.
	tagfiles
		show tag files used in this command.

PyTmp                                                                   *:PyTmp*

Open a temporary buffer to run python script.
This python script runs when leave the insert mode.

Timer {sec}                                                             *:Timer*

set timer. After {sec} passed, message is shown and asked quit or snooze.
'snooze_time' is used to set the snooze time. default vaule is 600 sec (10 min).

Find {-name FILENAME} [-dir DIR] [-depth D]                              *:Find*

Find files match with {FILENAME}.
	-name: set the searching file name (required).
	-dir: set the parent directory. (default: top directory of the project
		of the current file or parent directory of the current file.)
	-depth: depth of the searching files. (default: 1)
		-1 means to search file recursively. Otherwise, search files at the
		specified depth.

SearchJa                                                             *:SearchJa*

Search multibyte words.


==============================================================================
FUNCTIONS                                                     *meflib-functions*

meflib#set({var_name}, {args1}, {args2}=v:null)                   *meflib#set()*

Set local variable.
if {args2} is not null, set {args1} as key and {args2} as value.
See |meflib-options| for available options.

meflib#get({var_name}, {args1}, {args2}=v:null)                   *meflib#get()*

Get local variable.
if {args2} is not null, set {args1} as key and {args2} as default value.
otherwise, return set {args1} as default value.
if {var_name} or key is not found, return default value.

meflib#add({var_name}, {var})                                     *meflib#add()*

Add {value} to |list| of {var_name}. If {var_name} does not exist, make the list.

meflib#debug#set_debug({filename})                    *meflib#debug#set_debug()*

Set file name to write debug message.

meflib#debug#debug_log({dbgmsg}, {tag})               *meflib#debug#debug_log()*

Write debug message {dbgmsg} to debug log file with {tag}.
If {dbgmsg} is empty, write the file name.

meflib#basic#get_conf_dir()                        *meflib#basic#get_conf_dir()*

Return the user local configuration directory.

                                              *meflib#basic#analysis_args_hyp()*
meflib#basic#analysis_args_hyp({args}, {args_config})

A function to analyze the arguments of a command.
This function analyze the arguments like >
	:Command -key1 val2 -key2 val2
<
{args} is the string of argument of the command, that is gotten by |<f-args>|.
{config} is used to set the number of arguments as following. >
	let config = {'key1': 1, 'key2': 3}
<
Return value is the |dict| keys are key1, key2, ... and item of each key is
|list| of values. "no_opt" key is also returned, which contains arguments with
no key.


meflib#basic#get_top_dir({cwd})                     *meflib#basic#get_top_dir()*

Return the project-top directory relative to the {cwd}.
"project-top directory" means the directory containing .git/.svn directory.

meflib#basic#get_exe_cmd(...)                       *meflib#basic#get_exe_cmd()*

If called with no arguments, return system commands;
"start" for Windows, "open" for macOS, and "xdg-open" for Linux.
If {command} is specified, return the command path
if {command} is executable. Otherwise return empty string.

meflib#basic#get_hi_info({group_name}, {keys})      *meflib#basic#get_hi_info()*

Return the highlight setting of {group_name}. {keys} is a string or list of
strings to return the setting. e.g. >
	echo meflib#basic#get_hi_info('Comment', 'gui')
	" ['italic']
	echo meflib#basic#get_hi_info('Number', ['ctermfg', 'guifg'])
	" ['9', 'Red']
<

meflib#basic#set_scratch({text})                    *meflib#basic#set_scratch()*

Set the current buffer as a scratch buffer, and then put {text} in it.

meflib#basic#special_win({winid})                   *meflib#basic#special_win()*

Return 1 if the window of {winid} is a special window.

meflib#basic#map_util({name})                          *meflib#basic#map_util()*

Execute the mapping of {name} registered in |meflib-map_cmds|.

                                                         *meflib#color#isdark()*
meflib#color#isdark({r}, {g}, {b}, {thsd}=v:null, {verbose}=v:false)

return 1 if the color is dark.
{r}, {g}, {b} are values of red, green and yellow, in range 0.0 to 1.0.
{thsd} is threshold value, default is 0.42.
if {verbose} is 1, print the calculated value and threshold.

                                                    *meflib#color#get_colorid()*
meflib#color#get_colorid({r}, {g}, {b}, {gui}=v:null)

return color id of {r}, {g}, {b} in range 0 to 5.
color id is '#RRGGBB' if {gui} is 1, otherwise 16 to 231.

meflib#color#get_today_rgb()                      *meflib#color#get_today_rgb()*

return [month, day, dow, r, g, b]
month, day, and dow are month, day, and day of week of today.
r, g, b are color id of today in range if 0 to 5.

meflib#color#cho_isdark({thsd}=v:null)               *meflib#color#cho_isdark()*

Check {thsd} is suitable or not.
If {thsd} is not given, use default value.

meflib#color#ShowStatusLineBG()                *meflib#color#ShowStatusLineBG()*

Show today's status line background color.

                                                        *meflib#floating#open()*
meflib#floating#open({bufid}, {popid}, {str_list}, {config})

Wrapper function to create and open floating/popup window.
For initialization, set {bufid}=-1 and {winid}=-1.
This function return the list of {bufid} and {winid}.
To update the strings of the window, you recall this function with
these returned values.

meflib#floating#close({popids})                        *meflib#floating#close()*

Wrapper function to close floating/popup window.
{popids} is able to set both the id of the popup window or list of ids.

meflib#floating#close_all()                        *meflib#floating#close_all()*

Close all floating/popup windows opened by |meflib#floating#open()|.

                                                      *meflib#floating#select()*
meflib#floating#select({str_list}, {config}, {callback})

Wrapper function to create and open floating/popup select menu. This works
almost same as |popup_menu| of vim.
{config} is same as |meflib#floating#open()|.

meflib#filejump#main()                                  *meflib#filejump#main()*

Check the file under the cursor exists or not.
If it starts with "http[s]", this function try to open it in the web browser.


==============================================================================
OPTIONS                                                         *meflib-options*

pydoc_cmd                                                     *meflib-pydoc_cmd*
Command to be used in PyHelp.
default is 'pydoc3'.

cfi_on                                                           *meflib-cfi_on*
If set to 1, show current function name on the window.

qrun_finished                                             *meflib-qrun_finished*
Flag to check if qrun is finished or not.

quickrun_nvimterm                                     *meflib-quickrun_nvimterm*
whether to use terminal runner in nvim or not.

get_top_dir                                                 *meflib-get_top_dir*
Flag to use meflib#basic#get_top_dir function in Gregrep and Find commands.

ctags_config                                               *meflib-ctags_config*
Command and options to be used in Ctags.
	'command': Command. default is 'ctags'.
	'opt': Options. default is ''.

snooze_time                                                 *meflib-snooze_time*
Snooze time in seconds. default is 600 sec.

win_term_cmd                                               *meflib-win_term_cmd*
List of command and options to be used in Terminal in Windows OS.

term_default                                               *meflib-term_default*
Default command modifier for terminal.

term_col_name                                             *meflib-term_col_name*
terminal color name.

birthday                                                       *meflib-birthday*
Birthday in [month, day] format. default is [0, 0].

fern_aft_conf                                             *meflib-fern_aft_conf*
Command and options to be used when AFTViewer is called in Fern.
	'cmd': Command. default is 'aftviewer'.
	'type_conf': Options for each file type.

show_cwd_tab                                               *meflib-show_cwd_tab*
Flag to show current working directory in tabline.

tabline_footer                                           *meflib-tabline_footer*
Function to set string in tabline footer.

statusline                                                   *meflib-statusline*
the variable to administer statusline
	'_': basic statusline
	'off': statusline for off window
	'qf': statusline for quickfix window
	other(num): statusline for short window. num=max width for this statusline

unload_plugins                                           *meflib-unload_plugins*
plugins to be unloaded.

plug_opt                                                       *meflib-plug_opt*
Variable for plugins.
Basically used to decide whether to load plugins or not.

lazy_plugins                                               *meflib-lazy_plugins*
plugins to be loaded by lazy loading.

insert_plugins                                           *meflib-insert_plugins*
plugins to be loaded by InsertEnter autocmd.

map_cmds                                                       *meflib-map_cmds*
dictionary for setting variable commands for one key.

exclude_dirs                                               *meflib-exclude_dirs*
set directories excluding from search.

side_width                                                   *meflib-side_width*
set width of optional window.

del_commands                                               *meflib-del_commands*
commands to be deleted before opening Vim.

my_color_set                                               *meflib-my_color_set*
function to be called for each color scheme.

plugin_his                                                   *meflib-plugin_his*
functions to be called when highlight is set.

colorscheme                                                 *meflib-colorscheme*
colorscheme name to be set. default is 'evening'.

def_statusline                                           *meflib-def_statusline*
default statusline

auto_ime_off                                               *meflib-auto_ime_off*
If set to 1, turn off IME or Japanese input when leaving insert mode.

last_file_win                                             *meflib-last_file_win*
file name and tab number of last closed window.

last_file_tab                                             *meflib-last_file_tab*
file name and tab number of last closed tab.

show_git_status                                         *meflib-show_git_status*
Flag to show git status on the window.


==============================================================================
MEMO                                                               *meflib-memo*

* python  |meflib-pythonmemo.jax|
* shell  |meflib-shellmemo.jax|
* strftime |meflib-strftime.jax|
* vim  |meflib-vimmemo.jax|

==============================================================================
LICENSE                                                         *meflib-license*

The MIT License (https://github.com/MeF0504/basic_setup/blob/master/LICENSE)

vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
