# users generic .zshrc file for zsh(1)

# read shell-independent Run Command file.
# maybe update to set the path dynamically.
if [[ -f ${HOME}/.posixShellRC ]]; then
    source $HOME/.posixShellRC
else
    echo "[posix shell rc] not found!"
fi

##{{{ Environment variable configuration
#
# <c-w>で消す際に/単位で削除
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
#}}}

##{{{ Default shell configuration
#
# set prompt
#
autoload colors
colors

function ip_color() {
    local ip=`curl --connect-timeout 0.5 ifconfig.io 2> /dev/null`
    if [[ $(echo $ip | wc -l) -ne 1 ]]; then
        local ret=""
        ret=$ret"%F{15}%K{16}m%f%k"
        ret=$ret"%F{15}%K{16}i%f%k"
        ret=$ret"%F{15}%K{16}s%f%k"
        ret=$ret"%F{15}%K{16}s%f%k"
        ret=$ret" "
        echo $ret
        return 0
    fi
    if [[ $ip == *.* ]]; then   # IPv4
        ip11=$(echo $ip | cut -f 1 -d ".")
        ip12=$ip11
        ip21=$(echo $ip | cut -f 2 -d ".")
        ip22=$ip21
        ip31=$(echo $ip | cut -f 3 -d ".")
        ip32=$ip31
        ip41=$(echo $ip | cut -f 4 -d ".")
        ip42=$ip41
        ipv=4
    elif [[ $ip == *:* ]]; then     # IPv6
        ip11=$(( 0x$(echo $ip | cut -f 1 -d ":") >> 8))
        ip12=$(( 0x$(echo $ip | cut -f 1 -d ":") & 0xFF))
        ip21=$(( 0x$(echo $ip | cut -f 2 -d ":") >> 8))
        ip22=$(( 0x$(echo $ip | cut -f 2 -d ":") & 0xFF))
        ip31=$(( 0x$(echo $ip | cut -f 3 -d ":") >> 8))
        ip32=$(( 0x$(echo $ip | cut -f 3 -d ":") & 0xFF))
        ip41=$(( 0x$(echo $ip | cut -f 4 -d ":") >> 8))
        ip42=$(( 0x$(echo $ip | cut -f 4 -d ":") & 0xFF))
        ipv=6
    else
        ip11=16 # black
        ip12=16 # black
        ip21=16 # black
        ip22=16 # black
        ip31=16 # black
        ip32=16 # black
        ip41=16 # black
        ip42=16 # black
        ipv="-"
    fi

    ### display colorfully: https://qiita.com/butaosuinu/items/770a040bc9cfe22c71f4
    local ret=""
    ret=$ret"%F{$ip11}%K{$ip12}I%f%k"
    ret=$ret"%F{$ip21}%K{$ip22}P%f%k"
    ret=$ret"%F{$ip31}%K{$ip32}v%f%k"
    ret=$ret"%F{$ip41}%K{$ip42}${ipv}%f%k"
    ret=$ret" "
    echo $ret
}
case ${UID} in
0)
    PROMPT="%{${fg[cyan]}%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') %B%{${fg[red]}%}%/#%{${reset_color}%}%b "
    PROMPT2="%B%{${fg[red]}%}%_#%{${reset_color}%}%b "
    SPROMPT="%B%{${fg[yellow]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}%b "
    ;;
*)
    local short="%{${fg[red]}%}%/ S%{${reset_color}%} "
    local long="%{${fg[red]}%}%(4/,%-1/.../%2/,%/) L%{${reset_color}%} "
    PROMPT="%4(/|$long|$short)"
    ## from http://0xcc.net/blog/archives/000032.html
    PROMPT2="%{${fg[red]}%}%_%%%{${reset_color}%} "
    SPROMPT="%{${fg[yellow]}%}%r is correct? [n,y,a,e]:%{${reset_color}%} "
    if [ -n "${REMOTEHOST}${SSH_CONNECTION}" ]; then
        PROMPT="%{${fg[cyan]}%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') ${PROMPT}"
        #PROMPT="%F{cyan}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]')%f ${PROMPT}"
    else
        PROMPT="%{${fg[green]}%}%T%{${reset_color}%} ${PROMPT}"
    fi
    PROMPT_ORI=$PROMPT
    PROMPT=$(ip_color)$PROMPT_ORI
    ;;
esac

# show git status in right prompt
#
# http://tkengo.github.io/blog/2013/05/12/zsh-vcs-info/
# or http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information
autoload -Uz add-zsh-hook
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' max-exports 6 # formatに入る変数の最大数
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr " %{${fg[yellow]}%}cmt%{${reset_color}%}"
zstyle ':vcs_info:git:*' unstagedstr " %{${fg[red]}%}add%{${reset_color}%}"
zstyle ':vcs_info:git:*' formats "%{${fg[green]}%}GIT [%b]%{${reset_color}%}%c%u"
zstyle ':vcs_info:git:*' actionformats '! %a %c %u'
setopt prompt_subst

function rprom() {
    vcs_info
    RPROMPT="${vcs_info_msg_0_}"
    #echo $RPROMPT
}
add-zsh-hook precmd rprom


# auto change directory
#
setopt auto_cd

# auto directory pushd that you can get dirs list by cd -[tab]
#
setopt auto_pushd

# command correct edition before each completion attempt
#
setopt correct

# compacked complete list display
#
setopt list_packed

# no remove postfix slash of command line
#
setopt noautoremoveslash

# no beep sound when complete list displayed
#
setopt nolistbeep
#}}}

##{{{ Keybind configuration
#
# emacs like keybind (e.x. Ctrl-a gets to line head and Ctrl-e gets
#   to end) and something additions
#
bindkey -e
bindkey "^[[1~" beginning-of-line # Home gets to line head
bindkey "^[[4~" end-of-line # End gets to line end
bindkey "^[[3~" delete-char # Del

# historical backward/forward search with linehead string binded to ^P/^N
#
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end

# reverse menu completion binded to Shift-Tab
#
bindkey "\e[Z" reverse-menu-complete

# Enter key bind
# key bind:: https://qiita.com/yuku_t/items/e58cbecf13407446bd50
# Enter key bind:: https://qiita.com/yut-kt/items/267ce4648b801c1c1bca

# update PROMPT
function update_prompt() {
    # check that PROMPT is not changed.
    if [[ $PROMPT =~ ^%F.* ]]; then
        PROMPT=$(ip_color)$PROMPT_ORI
    fi
    return 0
}
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    update_prompt
    if [[ -f $HOME/.zsh/enter.zsh ]]; then
        echo
        source $HOME/.zsh/enter.zsh
        zle reset-prompt  # 上の処理で表示があるとこっち?
    else
        zle accept-line   # 上の処理で表示がないとこっち?
    fi
    return 0
}

zle -N do_enter     # do_enterをwidgetとして登録
bindkey '^M' do_enter 

# ctrl-b,f で前後の単語に移動
bindkey "^b" backward-word
bindkey "^f" forward-word

#}}}

##{{{ Command history configuration
#
HISTFILE=${HOME}/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups     # ignore duplication command history list
setopt hist_ignore_space    # ignore command starting with space
setopt share_history        # share command history data

# 特定のコマンドを保存しない
# https://mollifier.hatenablog.com/entry/20090728/p1
zshaddhistory() {
    local line=${1%%$'\n'}
    [[ ${line} != (l|l[sal])
    && ${line} != (c|cd)
    && ${line} != *history
    ]]
}

#}}}

##{{{ Completion configuration
#
fpath=(${HOME}/.zsh/functions/Completion ${fpath})
autoload -U compinit
compinit

#大文字と小文字を無視して補完
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 補完用ファイル読み込み
[ -f ${HOME}/.zsh/complete.zsh ] && source ${HOME}/.zsh/complete.zsh
#}}}

##{{{ zsh editor
#
autoload zed
#}}}

##{{{ Prediction configuration
#
#autoload predict-on
#predict-off
#}}}

##{{{ Alias configuration
#
# expand aliases before completing
#
setopt complete_aliases     # aliased ls needs if file/dir completions work

alias -g H='| head'
alias -g T='| tail'
alias -g W='| wc'
alias -g G='| grep -i'
alias -g L='| less -R'
alias -g TE=' 2>&1 | tee '

alias zshhistory="vi -R ~/.zsh_history"

#}}}

##{{{ hook function setting

#chpwd関数を定義しておくとzshがcd後に勝手に実行してくれる。
#function chpwd() {pwd; echo -ne "\033]0;${USER}@${HOST}\007"}
IGNORE_FETCH= 
function chpwd() {
    pwd
    if [[ -e .git ]]; then
        #echo "%{${fg[yellow]}%}check git repo is up-to-date%{${reset_color}%}"
        #echo "\033[33mcheck git repo is up-to-date  (---> git fetch) \033[0m"
        # don't execute git fetch if dir name is in $IGNORE_FETCH.
        if [[ -z $(echo $IGNORE_FETCH | grep -e $(basename $(pwd))) ]]; then
            echo "fetching..."
            git fetch
        else
            echo "fetching... canceled"
        fi
    fi
}
#from http://qiita.com/dai___chi/items/135d063444d152e63e1c
#}}}

##{{{ terminal configuration
#
#case "${TERM}" in
#screen)
    #TERM=xterm-256color
    #;;
#esac

# export TERM=xterm-256color

case "${TERM}" in
xterm|xterm-color|xterm-256color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm-color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm)
    ;;
cons25)
    zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
jfbterm-color)
    zstyle ':completion:*' list-colors 'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
esac

# set terminal title as username+HOSTNAME
#

if [[ ${SSH_CLIENT} == "" ]]; then
    HOSTNAME="local"
else
    HOSTNAME=${HOST%%.*}
fi

case "${TERM}" in
xterm|xterm-color|kterm|kterm-color|xterm-256color)
    precmd() {
        #echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
        echo -ne "\033]0;${USER}@${HOSTNAME}\007"
    }
    ;;
esac

# change tab color
# https://gist.github.com/wadey/1140259
if [[ -n $ITERM_SESSION_ID ]]; then
    tab_color() {
        echo -ne "\033]6;1;bg;red;brightness;$1\a"
        echo -ne "\033]6;1;bg;green;brightness;$2\a"
        echo -ne "\033]6;1;bg;blue;brightness;$3\a"
    }

    tab_reset() {echo -ne "\033]6;1;bg;*;default\a" }

    function iterm2_tab_precmd() {
        tab_reset
    }
    
    function iterm2_tab_preexec() {
        if [[ -n $TAB1 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB1.*$" ]]; then
            tab_color 255 0 0       # Red
        elif [[ -n $TAB2 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB2.*$" ]]; then
            tab_color 0 255 0       # Lime
        elif [[ -n $TAB3 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB3.*$" ]]; then
            tab_color 255 255 0     # Yellow
        elif [[ -n $TAB4 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB4.*$" ]]; then
            tab_color 0 0 255       # Blue
        elif [[ -n $TAB5 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB5.*$" ]]; then
            tab_color 255 0 255     # Fuchsia
        elif [[ -n $TAB6 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB6.*$" ]]; then
            tab_color 0 255 255     # Aqua
        elif [[ -n $TAB7 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB7.*$" ]]; then
            tab_color 0 128 0       # Green
        elif [[ -n $TAB8 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB8.*$" ]]; then
            tab_color 128 0 128     # Purple
        fi
    }

    add-zsh-hook precmd iterm2_tab_precmd
    add-zsh-hook preexec iterm2_tab_preexec

fi
#}}}

## {{{ added functions
#check the terminal can display 256colors

function 256colortest() {
    local code
    for code in {0..255}; do
        echo -e "\e[38;05;${code}m $code: Test"
    done
}
alias 256colortest="256colortest | less -R"

# grep from all git repository
# https://qiita.com/yuba/items/852d019af48ee7ccd92e
function git_grep() {
    ## option of uniq is different btw mac and linux?
    if [ "$(uname)" = "Darwin" ]; then
        git grep $1 $(git branch -a --format='%(objectname) %(refname:short)' | sort | uniq -s 40 | cut -c 42-)
    elif [ "$(uname)" = "Linux" ]; then
        git grep $1 $(git branch -a --format='%(objectname) %(refname:short)' | sort | uniq -w 40 | cut -c 42-)
    fi
}

#}}}

## {{{ OS dependent settings
if [ "$(uname)" = "Darwin" ]; then
    # https://pc-karuma.net/mac-dock-insert-space/
    alias ad_space="defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}' && killall Dock"
    alias ldd="otool -L"
    # https://book.mynavi.jp/macfan/detail_summary/id=78208
    alias rm_shadow="defaults write com.apple.screencapture disable-shadow -boolean true && killall SystemUIServer"

elif [ "$(uname)" = "Linux" ]; then
    # do nothing now.
fi
#}}}

##{{{ load user .zshrc configuration file
#
[ -f ${HOME}/.zsh/zshrc.mine ] && source ${HOME}/.zsh/zshrc.mine
#}}}

