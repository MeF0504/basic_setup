# users generic .zshrc file for zsh(1)

# read shell-independent Run Command file.
# maybe update to set the path dynamically.
if [[ -f ${HOME}/.posixShellRC ]]; then
    source $HOME/.posixShellRC
else
    echo "[posix shell rc] not found!"
fi

##{{{ Environment variable configuration
#
# <c-w>で消す際に/単位で削除
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

if [[ ${SSH_CLIENT} == "" ]]; then
    MYHOST="local"
else
    MYHOST=${HOST%%.*}
fi

#}}}

##{{{ Default shell configuration
#

# auto change directory
#
setopt auto_cd

# auto directory pushd that you can get dirs list by cd -[tab]
#
setopt auto_pushd

# command correct edition before each completion attempt
#
setopt correct

# compacked complete list display
#
setopt list_packed

# no remove postfix slash of command line
#
setopt noautoremoveslash

# no beep sound when complete list displayed
#
setopt nolistbeep
#}}}

##{{{ Keybind configuration
#
# emacs like keybind (e.x. Ctrl-a gets to line head and Ctrl-e gets
#   to end) and something additions
#
bindkey -e
bindkey "^[[1~" beginning-of-line # Home gets to line head
bindkey "^[[4~" end-of-line # End gets to line end
bindkey "^[[3~" delete-char # Del

# historical backward/forward search with linehead string binded to ^P/^N
#
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end

# reverse menu completion binded to Shift-Tab
#
bindkey "\e[Z" reverse-menu-complete

# Enter key bind
# key bind:: https://qiita.com/yuku_t/items/e58cbecf13407446bd50
# Enter key bind:: https://qiita.com/yut-kt/items/267ce4648b801c1c1bca
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line   # 処理で表示がないとこっち?
        return 0
    fi
    echo
    source $HOME/.zsh/enter.zsh
    echo '\n'
    zle reset-prompt  # 上の処理で表示があるとこっち?
    return 0
}

if [[ -f $HOME/.zsh/enter.zsh ]]; then
    zle -N do_enter     # do_enterをwidgetとして登録
    bindkey '^M' do_enter
fi

# ctrl-b,f で前後の単語に移動
bindkey "^b" backward-word
bindkey "^f" forward-word

#}}}

##{{{ Command history configuration
#
HISTFILE=${HOME}/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups     # ignore duplication command history list
setopt hist_ignore_space    # ignore command starting with space
setopt share_history        # share command history data

# 特定のコマンドを保存しない
# https://mollifier.hatenablog.com/entry/20090728/p1
zshaddhistory() {
    local line=${1%%$'\n'}
    [[ ${line} != (l|l[sal])
    # && ${line} != (c|cd)
    && ! ${line} =~ ".*history"
    ]]
}

#}}}

##{{{ Completion configuration
#
fpath=(${HOME}/.zsh/functions/Completion ${fpath})
autoload -U compinit
compinit

#大文字と小文字を無視して補完
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 補完用ファイル読み込み
[ -f ${HOME}/.zsh/complete.zsh ] && source ${HOME}/.zsh/complete.zsh
#}}}

##{{{ zsh editor
#
autoload zed
#}}}

##{{{ Prediction configuration
#
#autoload predict-on
#predict-off
#}}}

##{{{ hook function setting

#chpwd関数を定義しておくとzshがcd後に勝手に実行してくれる。
#function chpwd() {pwd; echo -ne "\033]0;${USER}@${HOST}\007"}
IGNORE_FETCH= 
function chpwd() {
    if [[ -n $OLD_PROMPT ]]; then
        pwd
    fi
    if [[ -e .git ]]; then
        #echo "%{${fg[yellow]}%}check git repo is up-to-date%{${reset_color}%}"
        #echo "\033[33mcheck git repo is up-to-date  (---> git fetch) \033[0m"
        # don't execute git fetch if dir name is in $IGNORE_FETCH.
        if [[ -z $(echo $IGNORE_FETCH | grep -e $(basename $(pwd))) ]]; then
            echo "fetching..."
            git fetch
        else
            echo "fetching... canceled"
        fi
    fi
}
#from http://qiita.com/dai___chi/items/135d063444d152e63e1c
#}}}

##{{{ terminal configuration
#
#case "${TERM}" in
#screen)
    #TERM=xterm-256color
    #;;
#esac

case "${TERM}" in
xterm|xterm-color|xterm-256color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm-color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm)
    ;;
cons25)
    zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
jfbterm-color)
    zstyle ':completion:*' list-colors 'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
esac

# set terminal title as username+MYHOST (in local PC, username+working dir)
#
case "${TERM}" in
xterm|xterm-color|kterm|kterm-color|xterm-256color)
    if [ -n "${REMOTEHOST}${SSH_CONNECTION}" ]; then
        precmd() {
            echo -ne "\033]0;${USER}@${MYHOST}\007"
        }
    else
        precmd() {
            if [[ $PWD = $HOME ]]; then
                mypwd=home
            else
                mypwd=$(basename $PWD)
            fi
            echo -ne "\033]0;${USER}@$mypwd\007"
        }
    fi
    ;;
esac

autoload -Uz add-zsh-hook
# change tab color
# https://gist.github.com/wadey/1140259
if [[ -n $ITERM_SESSION_ID ]]; then
    tab_color() {
        echo -ne "\033]6;1;bg;red;brightness;$1\a"
        echo -ne "\033]6;1;bg;green;brightness;$2\a"
        echo -ne "\033]6;1;bg;blue;brightness;$3\a"
    }

    tab_reset() {echo -ne "\033]6;1;bg;*;default\a" }

    cvt_str_int() {
        hex=$(for x in $(echo $1 | \grep -o '.');do printf "%03u" \"$x; done)
        if [[ $hex = "" ]]; then
            echo 0
        else
            echo $hex
        fi
    }

    function iterm2_tab_precmd() {
        tab_reset
    }

    function iterm2_tab_preexec() {
        # if [[ "$1" =~ "^ ?ssh" ]]; then
        #     local sshhost=$(for x in $(echo $1 | tr ' ' '\n'); do if [ $x != 'ssh' ] && [ ${x:0:1} != '-' ]; then; echo $x; fi; done)
        #     local st=$((${#sshhost}/3))
        #     tab_color $( cvt_str_int ${sshhost:0:1}) $( cvt_str_int ${sshhost:$st:1}) $(cvt_str_int ${sshhost:$((st*2)):1})
        # fi
        if [[ -n $TAB1 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB1.*$" ]]; then
            tab_color 255 0 0       # Red
        elif [[ -n $TAB2 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB2.*$" ]]; then
            tab_color 0 255 0       # Lime
        elif [[ -n $TAB3 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB3.*$" ]]; then
            tab_color 255 255 0     # Yellow
        elif [[ -n $TAB4 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB4.*$" ]]; then
            tab_color 0 0 255       # Blue
        elif [[ -n $TAB5 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB5.*$" ]]; then
            tab_color 255 0 255     # Fuchsia
        elif [[ -n $TAB6 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB6.*$" ]]; then
            tab_color 0 255 255     # Aqua
        elif [[ -n $TAB7 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB7.*$" ]]; then
            tab_color 0 128 0       # Green
        elif [[ -n $TAB8 ]] && [[ "$1" =~ "^ ?ssh" ]] && [[ "$1" =~ "$TAB8.*$" ]]; then
            tab_color 128 0 128     # Purple
        fi
    }

    add-zsh-hook precmd iterm2_tab_precmd
    add-zsh-hook preexec iterm2_tab_preexec

fi
#}}}

## {{{ OS dependent settings
if [ "$(uname)" = "Darwin" ]; then
    # https://pc-karuma.net/mac-dock-insert-space/
    alias ad_space="defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}' && killall Dock"
    alias ldd="otool -L"
    # https://book.mynavi.jp/macfan/detail_summary/id=78208
    alias rm_shadow="defaults write com.apple.screencapture disable-shadow -boolean true && killall SystemUIServer"

elif [ "$(uname)" = "Linux" ]; then
    # do nothing now.
fi
#}}}

##{{{ load user .zshrc configuration file
#
[ -f ${HOME}/.zsh/prompt.zsh ] && source ${HOME}/.zsh/prompt.zsh
[ -f ${HOME}/.zsh/alias.zsh ] && source ${HOME}/.zsh/alias.zsh
[ -f ${HOME}/.zsh/functions.zsh ] && source ${HOME}/.zsh/functions.zsh
[ -f ${HOME}/.zsh/zshrc.mine ] && source ${HOME}/.zsh/zshrc.mine
#}}}

