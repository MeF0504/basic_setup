# users generic .zshrc file for zsh(1)

# read shell-independent Run Command file.
# maybe update to set the path dynamically.
if [[ -f ${HOME}/.posixShellRC ]]; then
    source $HOME/.posixShellRC
else
    echo "[posix shell rc] not found!"
fi

# 基本設定 {{{
# {{{ Environment variable
#
# <c-w>で消す際に/単位で削除
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
# timeコマンドの表示設定
# https://dev.classmethod.jp/articles/zsh-time-command-formatting-like-bash/
export TIMEFMT=\
$'\n========================\n'\
$'Program : %J\n'\
$'CPU     : %P\n'\
$'user    : %*Us\n'\
$'system  : %*Ss\n'\
$'total   : %*Es\n'\
$'========================\n'

if [[ -z "${SSH_CLIENT}${SSH_CONNECTION}" ]]; then
    MYHOST="local"
else
    MYHOST=${HOST%%.*}
fi

#}}}

# basic autoload {{{
### 関数ファイル?のload
### ファイルは$FPATH を参照するらしい
### -U ... aliasによる上書きを防ぐ？
### -z ... zshの形式で読み込む

# 色を使用できるようにする
autoload -Uz colors && colors
# 自動補完
autoload -Uz compinit && compinit
# zshのバージョン指定が簡単
autoload -Uz is-at-least
# なにかの操作を行ったときに呼び出される関数を設定するコマンド
# hook memo {{{
# https://qiita.com/mollifier/items/558712f1a93ee07e22e2 とか
# vimにおけるautocmd みたいなものっぽい
# hookの種類としては，
# chpwd                 カレントディレクトリが変更したとき
# periodic              プロンプトを表示するたびに、$PERIOD秒ごと
# precmd                プロンプトを表示する直前
# preexec               Enterを押してコマンドを実行する直前
# zshaddhistory         コマンドラインがヒストリに追加される直前
# zshexit               zshを終了する直前
# zsh_directory_name    Dynamic named directoriesによるディレクトリ名変換
# とか？ }}}
autoload -Uz add-zsh-hook

# }}}

# setopt {{{
### option setting
### $ setopt で現在の設定を確認できるらしい
### 大文字／小文字，_は無視されるらしい; autocd = AUTOCD = auto_cd

# 日本語など8bitを通す
setopt print_eight_bit
# typoを補正してくれる
setopt correct
# ディレクトリ名のみで移動可
setopt auto_cd
# cdしたdirectoryをスタックへ自動追加， cd - で戻れるようにする
setopt auto_pushd
# 重複するディレクトリはスタックへ追加しない
setopt pushd_ignore_dups
# beep音を無効にする
setopt no_beep
# 補完候補時にbeep音を無効にする
# zshによるterminalのフロー操作を無効化する
# 通常だと<c-s> <c-r>でterminalの動きを止めたりできるが，
# これがあると<c-r>で使える履歴検索時に前／後への移動ができなくなる
# ので，フロー操作を無効化して履歴検索時に移動ができるようにする。
setopt no_flow_control
# 候補が多い場合は切り詰める
setopt list_packed
# ディレクトリ選択時に最後の/を残す
setopt no_auto_remove_slash
# --prefix= とかの=以降でも補完
setopt magic_equal_subst
# aliasの補完の際に，もとのコマンドに沿って補完してくれる
setopt complete_aliases
# }}}

# zstyle {{{
### 詳細がわかっていないけど，とりあえずdocを貼っておく
### http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module

#大文字と小文字を無視して補完
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# 補完時に選択し対象を強調
zstyle ':completion:*' menu select
# 補完を強調，interactiveに行う
# zstyle ':completion:*' menu select interactive
# setopt menu_complete    # 余分にtabを押す必要をなくす
# manの補完をセクション番号別に表示させる
zstyle ':completion:*:manuals' separate-sections true
# cd .. で補完する際に今のディレクトリを出さない
zstyle ':completion:*:cd:*' ignore-parents parent pwd
# lsの色設定
# が補完時にも働く？
case "${TERM}" in
xterm|xterm-color|xterm-256color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm-color)
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' 'tw=42;31' 'ow=43;31'
    ;;
kterm)
    ;;
cons25)
    zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
jfbterm-color)
    zstyle ':completion:*' list-colors 'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
esac
# }}}

# zmodload {{{
# これもよく分かっていないが，いくつかのモジュールは別れていて，必要に応じてlinkしないといけないらしい
# これもdocを貼っておく
# http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html

# some date/time commands and parametersらしい。今は$EPOCHSECONDSを使うため
zmodload zsh/datetime
# }}}

# {{{ bindkey
### key mapの設定
### bindkey -L で一覧が見れるらしい

# shift-tabで補完候補の後戻りする
bindkey "\e[Z" reverse-menu-complete
# ctrl-b,f で前後の単語に移動
bindkey "^b" backward-word
bindkey "^f" forward-word
# Enter key bind
# key bind:: https://qiita.com/yuku_t/items/e58cbecf13407446bd50
# Enter key bind:: https://qiita.com/yut-kt/items/267ce4648b801c1c1bca
function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line   # 処理で表示がないとこっち?
        return 0
    fi
    echo
    source $HOME/.zsh/enter.zsh
    echo '\n'
    zle reset-prompt  # 上の処理で表示があるとこっち?
    return 0
}

if [[ -f $HOME/.zsh/enter.zsh ]]; then  # enter.zshがある場合のみ設定
    zle -N do_enter     # do_enterをwidgetとして登録
    bindkey '^M' do_enter
fi

# }}}

# }}}

# history関連 {{{

# history 保存ファイル
HISTFILE=${HOME}/.zsh_history
# メモリに保存される (検索できる) 履歴数
HISTSIZE=50000
# ファイルに保存される履歴数
SAVEHIST=50000
# 重複するコマンドは履歴に残さない
setopt hist_ignore_dups
# spaceで始まるコマンドは履歴を残さない
setopt hist_ignore_space
# 同時に開いたzshで履歴を共有する
setopt share_history

# 履歴探索
# <c-p>, <c-n> または<esc-p>, <esc-n> で前後に移動
### zleはzsh line editor の略らしい
### これもdocを貼っとく http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end

# 特定のコマンドを保存しない
# https://mollifier.hatenablog.com/entry/20090728/p1
zshaddhistory() {
    local line=${1%%$'\n'}
    [[ ${line} != (l|l[sal])
    # && ${line} != (c|cd)
    && ! ${line} =~ ".*history"
    && ! ${line} == clear
    && ! ${line} == logout
    && ! ${line} == :
    && ! ${line} == \;
    ]]
}
# }}}

## {{{ 各 OS 用設定
if [ "$(uname)" = "Darwin" ]; then
    # https://pc-karuma.net/mac-dock-insert-space/
    alias ad_space="defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}' && killall Dock"
    alias ldd="otool -L"
    # https://book.mynavi.jp/macfan/detail_summary/id=78208
    alias rm_shadow="defaults write com.apple.screencapture disable-shadow -boolean true && killall SystemUIServer"

elif [ "$(uname)" = "Linux" ]; then
    # do nothing now.
fi
#}}}

# {{{ Terminal設定
### terminal のtab nameをusername@場所 にする
### 場所はssh先ならhost name, localならカレントディレクトリ，$HOMEだとhomeになる
case "${TERM}" in
xterm|xterm-color|kterm|kterm-color|xterm-256color)
    if [ -n "${SSH_CLIENT}${SSH_CONNECTION}" ]; then
        tab_title_precmd() {
            echo -ne "\033]0;${USER}@${MYHOST}\007"
        }
    else
        tab_title_precmd() {
            if [[ $PWD = $HOME ]]; then
                mypwd=home
            else
                mypwd=$(basename $PWD)
            fi
            echo -ne "\033]0;${USER}@$mypwd\007"
        }
    fi
    ;;
esac
add-zsh-hook precmd tab_title_precmd

# $TAB0-15にコマンドと引数を指定すると，色が変わる
# 例：serverにsshすると色が変わる
#       export TAB1=('ssh' 'server')
# 例2：ipython
#       export TAB2=('ipython.*' '')
# https://gist.github.com/wadey/1140259
if [[ -n $ITERM_SESSION_ID ]]; then
    tab_color() {
        echo -ne "\033]6;1;bg;red;brightness;$1\a"
        echo -ne "\033]6;1;bg;green;brightness;$2\a"
        echo -ne "\033]6;1;bg;blue;brightness;$3\a"
    }

    tab_reset() {echo -ne "\033]6;1;bg;*;default\a" }

    function iterm2_tab_precmd() {
        tab_reset
    }

    function iterm2_tab_color_set() {
        if [[ $1 == '0' ]]; then
            tab_color 0 0 0       # Black
        elif [[ $1 == '1' ]]; then
            tab_color 128 0 0       # Maroon
        elif [[ $1 == '2' ]]; then
            tab_color 0 128 0       # Green
        elif [[ $1 == '3' ]]; then
            tab_color 128 128 0     # Olive
        elif [[ $1 == '4' ]]; then
            tab_color 0 0 128       # Navy
        elif [[ $1 == '5' ]]; then
            tab_color 128 0 128     # Purple
        elif [[ $1 == '6' ]]; then
            tab_color 0 128 128     # Teal
        elif [[ $1 == '7' ]]; then
            tab_color 0 128 0       # Silver
        elif [[ $1 == '8' ]]; then
            tab_color 128 128 128     # Gray
        elif [[ $1 == '9' ]]; then
            tab_color 255 0 0     # Red
        elif [[ $1 == '10' ]]; then
            tab_color 0 255 0     # Lime
        elif [[ $1 == '11' ]]; then
            tab_color 255 255 0     # Yellow
        elif [[ $1 == '12' ]]; then
            tab_color 0 0 255     # Blue
        elif [[ $1 == '13' ]]; then
            tab_color 255 0 255     # Fuchsia
        elif [[ $1 == '14' ]]; then
            tab_color 0 255 255     # Aqua
        elif [[ $1 == '15' ]]; then
            tab_color 255 255 255     # White
        fi
    }

    function iterm2_tab_preexec() {
        if [[ -n $TAB0 ]] && [[ "$1" =~ "^ ?${TAB0[1]}" ]] && [[ "$1" =~ "${TAB0[2]}.*$" ]]; then
            iterm2_tab_color_set 0
        elif [[ -n $TAB1 ]] && [[ "$1" =~ "^ ?${TAB1[1]}" ]] && [[ "$1" =~ "${TAB1[2]}.*$" ]]; then
            iterm2_tab_color_set 1
        elif [[ -n $TAB2 ]] && [[ "$1" =~ "^ ?${TAB2[1]}" ]] && [[ "$1" =~ "${TAB2[2]}.*$" ]]; then
            iterm2_tab_color_set 2
        elif [[ -n $TAB3 ]] && [[ "$1" =~ "^ ?${TAB3[1]}" ]] && [[ "$1" =~ "${TAB3[2]}.*$" ]]; then
            iterm2_tab_color_set 3
        elif [[ -n $TAB4 ]] && [[ "$1" =~ "^ ?${TAB4[1]}" ]] && [[ "$1" =~ "${TAB4[2]}.*$" ]]; then
            iterm2_tab_color_set 4
        elif [[ -n $TAB5 ]] && [[ "$1" =~ "^ ?${TAB5[1]}" ]] && [[ "$1" =~ "${TAB5[2]}.*$" ]]; then
            iterm2_tab_color_set 5
        elif [[ -n $TAB6 ]] && [[ "$1" =~ "^ ?${TAB6[1]}" ]] && [[ "$1" =~ "${TAB6[2]}.*$" ]]; then
            iterm2_tab_color_set 6
        elif [[ -n $TAB7 ]] && [[ "$1" =~ "^ ?${TAB7[1]}" ]] && [[ "$1" =~ "${TAB7[2]}.*$" ]]; then
            iterm2_tab_color_set 7
        elif [[ -n $TAB8 ]] && [[ "$1" =~ "^ ?${TAB8[1]}" ]] && [[ "$1" =~ "${TAB8[2]}.*$" ]]; then
            iterm2_tab_color_set 8
        elif [[ -n $TAB9 ]] && [[ "$1" =~ "^ ?${TAB9[1]}" ]] && [[ "$1" =~ "${TAB9[2]}.*$" ]]; then
            iterm2_tab_color_set 9
        elif [[ -n $TAB10 ]] && [[ "$1" =~ "^ ?${TAB10[1]}" ]] && [[ "$1" =~ "${TAB10[2]}.*$" ]]; then
            iterm2_tab_color_set 10
        elif [[ -n $TAB11 ]] && [[ "$1" =~ "^ ?${TAB11[1]}" ]] && [[ "$1" =~ "${TAB11[2]}.*$" ]]; then
            iterm2_tab_color_set 11
        elif [[ -n $TAB12 ]] && [[ "$1" =~ "^ ?${TAB12[1]}" ]] && [[ "$1" =~ "${TAB12[2]}.*$" ]]; then
            iterm2_tab_color_set 12
        elif [[ -n $TAB13 ]] && [[ "$1" =~ "^ ?${TAB13[1]}" ]] && [[ "$1" =~ "${TAB13[2]}.*$" ]]; then
            iterm2_tab_color_set 13
        elif [[ -n $TAB14 ]] && [[ "$1" =~ "^ ?${TAB14[1]}" ]] && [[ "$1" =~ "${TAB14[2]}.*$" ]]; then
            iterm2_tab_color_set 14
        elif [[ -n $TAB15 ]] && [[ "$1" =~ "^ ?${TAB15[1]}" ]] && [[ "$1" =~ "${TAB15[2]}.*$" ]]; then
            iterm2_tab_color_set 15
        fi
    }

    add-zsh-hook precmd iterm2_tab_precmd
    add-zsh-hook preexec iterm2_tab_preexec

    function iterm2_tab_color_test() {
        for i in {0..15}; do
            echo $i
            iterm2_tab_color_set $i
            sleep 2
        done
        tab_reset
    }

fi

# }}}

# {{{ その他設定，関数
#chpwd関数を定義しておくとzshがcd後に勝手に実行してくれる。
#function chpwd() {pwd; echo -ne "\033]0;${USER}@${HOST}\007"}
IGNORE_FETCH= 
function chpwd() {
    if [[ -n $OLD_PROMPT ]]; then
        pwd
    fi
    if [[ -e .git ]]; then
        #echo "%{${fg[yellow]}%}check git repo is up-to-date%{${reset_color}%}"
        #echo "\033[33mcheck git repo is up-to-date  (---> git fetch) \033[0m"
        # don't execute git fetch if dir name is in $IGNORE_FETCH.
        if [[ -z $(echo $IGNORE_FETCH | grep -e $(basename $(pwd))) ]]; then
            echo "fetching..."
            git fetch
        else
            echo "fetching... canceled"
        fi
    fi
}
# }}}

# plugin 管理 (if needed) {{{
### https://github.com/zplug/zplug
# export ZPLUG_HOME=$HOME/.zsh/zplug
if [ -n "$ZPLUG_HOME" ]; then
    if [[ ! -d $ZPLUG_HOME ]]; then
        git clone https://github.com/zplug/zplug.git $ZPLUG_HOME
    fi
    source $ZPLUG_HOME/init.zsh
fi

# }}}

##{{{ load user .zshrc configuration file
#
[ -f ${HOME}/.zsh/complete.zsh ] && source ${HOME}/.zsh/complete.zsh
[ -f ${HOME}/.zsh/prompt.zsh ] && source ${HOME}/.zsh/prompt.zsh
[ -f ${HOME}/.zsh/alias.zsh ] && source ${HOME}/.zsh/alias.zsh
[ -f ${HOME}/.zsh/functions.zsh ] && source ${HOME}/.zsh/functions.zsh
[ -f ${HOME}/.zsh/zshrc.mine ] && source ${HOME}/.zsh/zshrc.mine
#}}}

