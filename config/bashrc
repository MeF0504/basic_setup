# vim: set filetype=sh:

# read shell-independent Run Command file.
# maybe update to set the path dynamically.
if [[ -f "${HOME}/.posixShellRC" ]]; then
    source "$HOME/.posixShellRC"
else
    if [[ -t 0 ]]; then
        echo "[posix shell rc] not found!" >&2
    fi
fi

# tab title {{{
if [[ -t 0 ]]; then
    if [[ $(uname) =~ MINGW ]]; then
        echo -ne "\033]0;$(_get_zodiac_whgm 2> /dev/null) Git Bash @ ${HOSTNAME}\a"
    else
        echo -ne "\033]0;$(_get_zodiac_whgm 2> /dev/null) ${USER} @ ${HOSTNAME}\a"
    fi
fi
# }}}

##{{{ key bind
# ctrl-b,f で前後の単語に移動
# https://qiita.com/yamamoto_hiroya/items/2f5c549c2da25cb9eb78
bind '"\C-f": forward-word'
bind '"\C-b": backward-word'

# <c-w>で消す際に/単位で削除
# https://qiita.com/yamamoto_hiroya/items/9d569010cf0be4719b6c
stty werase undef
bind '"\C-w": unix-filename-rubout'

# ctrl-p, nでhistoryの一致検索
bind '"\C-p": history-search-backward'
bind '"\C-n": history-search-forward'

# }}}

## {{{ history
# https://www.na3.jp/entry/20100727/p1
# historyの保存ファイル
export HISTFILE=~/.bash_history
# historyの保存数?
export HISTSIZE=10000
# HISTFILEに保存する行数
export HISTFILESIZE=10000
# 直前と同じコマンドは残さない:spaceで始まるコマンドは残さない
# export HISTCONTROL=ignorespace:ignoredups
# 上の2つを同時に適用
export HISTCONTROL=ignoreboth
# 特定のコマンドを記録に残さない
export HISTIGNORE=pwd:history:ls

# }}}

# cd時の自動関数を作る {{{
# https://zenn.dev/hasu_83/articles/make-custom-cd
autocd()
{
    # ||: fail safe
    builtin cd "$@" || return
    # auto fetch
    if [ -d "${PWD}/.git" ]; then
        read -p "execute fetch? ([y]/n) " -r yn
        if [ -z "$yn" ] || [ "$yn" = 'y' ]; then
            echo "fetching..."
            git fetch
        fi
    fi
}
alias cd="autocd"
# }}}

##{{{ load other .bashrc configuration file
_chk_and_source "$HOME/.bash/prompt.bash"
_chk_and_source "$HOME/.bash/complete.bash"
_chk_and_source "$HOME/.bash/bashrc.mine"
# }}}

# initial message {{{
echo "today: $(today_percentage)%"
# }}}

