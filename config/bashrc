# vim: set filetype=sh:

# read shell-independent Run Command file.
# maybe update to set the path dynamically.
if [[ -f "${HOME}/.posixShellRC" ]]; then
    source "$HOME/.posixShellRC"
else
    echo "[posix shell rc] not found!"
fi

##{{{ prompt
# useful: https://qiita.com/hmmrjn/items/60d2a64c9e5bf7c0fe60
# color & format: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# path
_PS_PATH='\[\e[97m\]\[\e[44m\]${PWD}\[\e[0m\]'
if [[ -n "${SSH_CLIENT}${SSH_CONNECTION}" ]]; then
    # host name
    _PS_HOST='\[\e[36m\]${HOSTNAME%%.*}\[\e[0m\] '
fi
_PS_COUNTFILE='(`ls -U1 | wc -l | sed -e "s/ //g"`)'
# time
_PS_TIME='\[\e[92m\]\D{%H:%M}\[\e[0m\]'
# user name (bold)
_PS_USER=' \[\e[1m\e[31m\]\u\[\e[0m\]'

# git information
GITPROMPT="${HOME}/.bash/git-prompt.sh"
if [[ -f "$GITPROMPT" ]]; then
    # unstaged (*) and staged (+) are shown
    export GIT_PS1_SHOWDIRTYSTATE=1
    source "$GITPROMPT"
    _PS_GIT='$(__git_ps1 " (%s)")'
fi

# change red if the previous command was failed.
# https://qiita.com/rtakasuke/items/4b50e156ab82b0824676
_PS_END=" \`
if [ \$? = 0 ]; then
    echo '\$';
else
    echo \[\e[35m\]\$\[\e[0m\];
fi
\` "

_PS_SHINFO="\[\e[33m\][${SHELL_INFO}]\[\e[0m\] "

export PS1="${_PS_SHINFO}${_PS_HOST}${_PS_PATH}${_PS_COUNTFILE}\n${_PS_TIME}${_PS_USER}${_PS_GIT}${_PS_END}"

# }}}

# tab title {{{
if [[ "$(uname)" = "MINGW*" ]]; then
    echo -ne "\033]0;Git Bash @ $HOSTNAME\a"
else
    echo -ne "\033]0;${USER} @ ${HOSTNAME}\a"
fi
# }}}

##{{{ key bind
# ctrl-b,f で前後の単語に移動
# https://qiita.com/yamamoto_hiroya/items/2f5c549c2da25cb9eb78
bind '"\C-f": forward-word'
bind '"\C-b": backward-word'

# <c-w>で消す際に/単位で削除
# https://qiita.com/yamamoto_hiroya/items/9d569010cf0be4719b6c
stty werase undef
bind '"\C-w": unix-filename-rubout'

# ctrl-p, nでhistoryの一致検索
bind '"\C-p": history-search-backward'
bind '"\C-n": history-search-forward'

# }}}

## {{{ history
# https://www.na3.jp/entry/20100727/p1
# historyの保存ファイル
export HISTFILE=~/.bash_history
# historyの保存数?
export HISTSIZE=10000
# HISTFILEに保存する行数
export HISTFILESIZE=10000
# 直前と同じコマンドは残さない:spaceで始まるコマンドは残さない
# export HISTCONTROL=ignorespace:ignoredups
# 上の2つを同時に適用
export HISTCONTROL=ignoreboth
# 特定のコマンドを記録に残さない
export HISTIGNORE=pwd:history:ls

# }}}

# {{{ cd時の自動関数を作る {{{
# https://zenn.dev/hasu_83/articles/make-custom-cd
autocd() {
    # ||: fail safe
    builtin cd "$@" || return

    if [ -d "${PWD}/.git" ]; then
        read -p "execute fetch? ([y]/n) " -r yn
        if [ -z "$yn" ] || [ "$yn" = 'y' ]; then
            echo "fetching..."
            git fetch
        fi
    fi
}
alias cd="autocd"
# }}}

# load fzf settings {{{
[[ -f ${HOME}/.fzf.bash ]] && source ${HOME}/.fzf.bash
# }}}

##{{{ load user .bashrc configuration file
[[ -f "$HOME/.bash/bashrc.mine" ]] && source "$HOME/.bash/bashrc.mine"
# }}}

