#! /usr/bin/env python3

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import matplotlib.font_manager as fm
import matplotlib


#  conf name: [[sub_options_name1, help1], [name2, help2]]
conf_list = {
        'color': [['sort', 'select from red/blue/green/all']],
        'font': [['ext', 'extension (def: ttf)'],
                 ['dir', 'directory of fonts'],
                 ['fig', 'display fonts by figure ([y]/n)']],
        'colormap': [['show', 'show color maps in figure (y/[n])'],
                     ['names', 'list shown color map names separated by space or if empty all are shown']],
        }


def cvrt_rgb(col_str):
    r = int(col_str[1:3], 16)
    g = int(col_str[3:5], 16)
    b = int(col_str[5:7], 16)
    return [r, g, b]


def bg_full(r, g, b):
    return '\x1b[48;2;{:d};{:d};{:d}m'.format(r, g, b)


def fg_full(r, g, b):
    return '\x1b[38;2;{:d};{:d};{:d}m'.format(r, g, b)


def clear():
    return '\x1b[0m'


def sort_col(cols, sort):
    import numpy as np
    names = np.array(list(cols.keys()), dtype=str)
    col_nums = []
    for name in names:
        if type(cols[name]) == str:
            r, g, b = cvrt_rgb(cols[name])
        else:
            r, g, b = cols[name]
            r = int(r*255)
            g = int(g*255)
            b = int(b*255)
        if sort == 'red':
            col_nums.append(r)
        elif sort == 'blue':
            col_nums.append(g)
        elif sort == 'green':
            col_nums.append(b)
        elif sort == 'all':
            # col_nums.append(r*256*256+g*256+b)
            # col_nums.append(r+g+b)
            col_nums.append(r*0.299+g*0.587+b*0.114)
    idx = np.argsort(col_nums)
    return names[idx]


def get_color(opt):
    cols = mcolors.get_named_colors_mapping()
    if opt['sort'] in 'red blue green all'.split():
        names = sort_col(cols, opt['sort'])
    else:
        names = cols.keys()

    for name in names:
        if type(cols[name]) == str:
            r, g, b = cvrt_rgb(cols[name])
        else:
            r, g, b = cols[name]
            r = int(r*255)
            g = int(g*255)
            b = int(b*255)
        try:
            print('{}{}{} {}{}{} ({:d}:{:d}:{:d})'.format(
                fg_full(r, g, b), name, clear(),
                bg_full(r, g, b), name, clear(),
                r, g, b,
            ))
        except Exception:
            print('{}: failed to set color. {}'.format(name, cols[name]))


def get_font(opts):
    if opts['dir'] == '':
        fontdir = None
    else:
        fontdir = opts['dir']
    if opts['ext'] == '':
        ext = 'ttf'
    else:
        ext = opts['ext']
    fonts = fm.findSystemFonts(fontpaths=fontdir, fontext=ext)

    if opts['fig'] == 'y':
        font_names = []
        for font in fonts:
            try:
                font_name = fm.FontProperties(fname=font).get_name()
            except RuntimeError:
                print('fail to add font: {}'.format(font))
            else:
                if font_name not in font_names:
                    font_names.append(font_name)

        figs = []
        axes = []
        names_per_1page = 29
        L = int(len(font_names)/names_per_1page)+1
        print(f'plot {L} figures')
        for i in range(L):
            figs.append(plt.figure(figsize=(8, 11)))
            axes.append(figs[i].add_axes((0, 0, 1, 1)))
            for j in range(names_per_1page):
                index = i*names_per_1page+j
                if index >= len(font_names):
                    break
                font = font_names[index]
                axes[i].text(0.1, 0.9-0.03*j, 'font test', fontdict=dict(
                        color='black', fontfamily=font, fontsize=14,
                    ))
                axes[i].text(0.5, 0.9-0.03*j, font, fontdict=dict(
                        color='gray', fontsize=14,
                    ))

            axes[i].grid(False)
        plt.show()

    else:
        res = {}
        for ft in fonts:
            ft = Path(ft)
            f_dir = str(ft.parent)
            if f_dir in res:
                res[f_dir].append(ft.name)
            else:
                res[f_dir] = [ft.name]

        for f_dir in sorted(res.keys()):
            print('@ {}'.format(f_dir))
            for font in sorted(res[f_dir]):
                print(font)
            print()


def get_colormap(opt):
    import numpy as np
    colormap_names = [k for k in matplotlib.colormaps]
    is_show = opt['show'] == 'y'
    if is_show:
        selected_names = opt['names'].split()
        if len(selected_names) == 0:
            selected_names = colormap_names
        x = np.arange(0, 1, 0.001)
        fig1 = plt.figure(figsize=(4, 8))
        ax11 = fig1.add_subplot(1, 1, 1)
        for i, name in enumerate(selected_names):
            if name not in colormap_names:
                print(f'{name} is incorrect.')
                continue
            cmap = matplotlib.colormaps[name]
            ax11.scatter(x, np.ones(x.shape)*i, color=cmap(x))
        ax11.set_yticks(np.arange(len(selected_names)))
        ax11.set_yticklabels(selected_names)
        plt.show()
    else:
        for cm_name in colormap_names:
            print(cm_name)


def main(args):
    func_name = f'get_{args.conf_name}'
    opt = {}
    for arg, help_str in conf_list[args.conf_name]:
        opt[arg] = input(f' * {arg} ({help_str}) = ')
    exec(f'{func_name}(opt)')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('conf_name', choices=list(conf_list.keys()),
                        help='config name')
    args = parser.parse_args()
    main(args)
