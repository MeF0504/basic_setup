#! /usr/bin/env python3
# pseudo-tree command

import os
import argparse
import re
from pathlib import Path
import datetime
from stat import filemode
from fnmatch import fnmatchcase
from functools import partial

from pymeflib.tree2 import show_tree
from pymeflib.color import FG, END

debug = False
expatrns = None


def get_pattern_from_file(exfiles):
    global expatrns
    if expatrns is not None:
        return expatrns
    res = []
    if exfiles is None:
        return res

    for exfile in exfiles:
        exfile = Path(exfile)
        if not exfile.is_file():
            print('exfile {} is not readable'.format(exfile))
            continue

        with open(exfile, 'r') as f:
            for line in f:
                line = line.replace('\n', '')
                line = line.replace(' ', '')
                if line.startswith('#'):
                    continue
                res.append(line)
    expatrns = res
    return res


def get_contents(args, root, path):
    if args.maxdepth != 0 and len(Path(path).parts) >= args.maxdepth:
        return [], []
    fullpath = Path(root)/path
    dirs = []
    files = []
    expatrns = get_pattern_from_file(args.exfiles)
    for f in fullpath.glob('*'):
        if f.name.startswith('.') and not args.all:
            continue
        if args.exclude is not None:
            if re.search(args.exclude, str(f)):
                continue
        skip = False
        for expt in expatrns:
            if expt.startswith('!'):
                expt = expt[1:]
                if fnmatchcase(str(f), expt):
                    skip = False
                    break
            else:
                if fnmatchcase(str(f), expt):
                    skip = True
        if skip:
            continue

        if f.is_file():
            files.append(f.name)
        elif f.is_dir():
            dirs.append(f.name)
    dirs.sort()
    files.sort()
    return dirs, files


def get_file_info(verbose, fpath):
    if not os.path.exists(fpath):
        # bloken link
        return '', '\tfile not exists.'

    col = ''
    # directory
    if os.path.isdir(fpath):
        col = FG['b']

    # symbolic link
    if os.path.islink(fpath):
        realpath = '-> '+os.path.realpath(fpath)
        col = FG['m']
    else:
        realpath = ''

    if not verbose:
        return col, END

    stat = os.stat(fpath)

    # access
    access = filemode(stat.st_mode)

    # time stamp
    # meta data update (UNIX), created (Windows)
    # dt = datetime.datetime.fromtimestamp(stat.st_ctime)
    # created (some OS)
    # dt = datetime.datetime.fromtimestamp(stat.st_birthtime)
    # last update
    dt = datetime.datetime.fromtimestamp(stat.st_mtime)
    # last access
    # dt = datetime.datetime.fromtimestamp(stat.st_atime)
    timestamp = dt.strftime('%Y/%m/%d-%H:%M:%S')

    # file size
    filesize = os.path.getsize(fpath)
    prefix = ''
    if filesize > 1024**3:
        filesize /= 1024**3
        prefix = 'G'
    elif filesize > 1024**2:
        filesize /= 1024**2
        prefix = 'M'
    elif filesize > 1024:
        filesize /= 1024
        prefix = 'k'
    size = '({:.1f} {}B)'.format(filesize, prefix)

    return col,\
        '{}\t{} {} {} {}'.format(END, access, size, timestamp, realpath)


def main(args):
    add_info = partial(get_file_info, args.verbose)
    show_tree(args.root, partial(get_contents, args, args.root), add_info)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('root', help='root directory', nargs='?', default='.')
    parser.add_argument('-a', dest='all', help='do not ignore entries starting with .', action='store_true')
    parser.add_argument('-v', '--verbose', help='show the verbose.', action='store_true')
    parser.add_argument('-maxdepth', help='specify the level of directory. If set 0, show all directories.', type=int, default=0)
    parser.add_argument('-exclude', help='specify excluding patterns using regular expression.', type=str)
    parser.add_argument('-exfiles', help='specify excluding patterns from pattern files written in shell-style wildcards, like gitignore.', type=str, nargs='*')
    args = parser.parse_args()
    main(args)
