#! /usr/bin/env python3
### pseudo-tree command

import os
import argparse
import re
from pathlib import Path

from libtree import show_tree

debug = False

def get_file_list(args):
    # get list of directories and files by using pathlib
    file_list = [{}]
    top_path = Path(args.root).resolve()
    top_path = Path(args.root)
    root = str(top_path)
    if args.maxdepth == 0:
        glob_path = ['**/*']
    else:
        glob_path = []
        for i in range(args.maxdepth):
            glob_path.append('*/'*i)
            glob_path[i] += '*'

    tmp_list = file_list
    for gp in glob_path:
        if debug:
            print('<--{}-->'.format(gp))
        for cpath in top_path.glob(gp):
            if (args.exclude is not None) and re.search(args.exclude, str(cpath)):
                continue

            if not args.all:
                if cpath.name.startswith('.'): continue
                cpath_ignore = False
                for d in cpath.parents:
                    if d == top_path:
                        break
                    if str(d.name).startswith('.'):
                        cpath_ignore = True
                        break
                if cpath_ignore: continue

            if debug:
                print('cpath: {},\n  parent: {}'.format(cpath, cpath.relative_to(top_path).parent))
            tmp_list = file_list
            for par in cpath.relative_to(top_path).parts[:-1]:
                if debug:
                    print('par: {}'.format(par))
                if str(par)=='.': continue
                tmp_list = tmp_list[0][str(par)]
            if debug:
                print('file_list:{},\n tmp_list:{}'.format(file_list, tmp_list))
            if cpath.is_dir():
                tmp_list[0][str(cpath.name)] = [{}]
            else:
                tmp_list.append(str(cpath.name))
    return root, file_list

def main(args):
    root, file_list = get_file_list(args)
    show_tree(file_list, root)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('root', help='root directory', nargs='?', default='.')
    parser.add_argument('-a', dest='all', help='do not ignore entries starting with .', action='store_true')
    parser.add_argument('-maxdepth', help='specify the level of directory. If set 0, show all directories.', type=int, default=0)
    parser.add_argument('-exclude', help='specify excluding files using regular expression.', type=str)
    # parser.add_argument('--walk', help='use os.walk', action='store_true')
    args = parser.parse_args()
    main(args)

