#! /usr/bin/env python3

import os
import subprocess
import glob
import argparse
import json
from pathlib import Path


def print_verbose(msg, verbose, **kwargs):
    if verbose:
        print(msg, **kwargs)


def get_config(verbose):
    if 'XDG_CONFIG_HOME' in os.environ:
        xdg_dir = Path(os.environ['XDG_CONFIG_HOME'])
    else:
        xdg_dir = Path('~/.config').expanduser()

    conf_file = xdg_dir/'meflib/shows_config.json'
    if conf_file.is_file():
        print_verbose('find config: {}'.format(conf_file), verbose)
        with open(conf_file, 'r') as f:
            shows_conf = json.load(f)

        if 'conf' in shows_conf:
            conf = shows_conf['conf']
        else:
            conf = None
        if 'cmd' in shows_conf:
            # common command
            cmd = shows_conf['cmd']
        else:
            cmd = None
        if "threshold" in shows_conf:
            thr = shows_conf['threshold']
        else:
            thr = None
        if "shell" in shows_conf:
            shell = shows_conf['shell']
        else:
            shell = None
    else:
        print_verbose('config file is not found.', verbose)
        conf = None
        cmd = None
        thr = None
        shell = None

    if cmd is None:
        if os.uname()[0] == 'Linux':
            cmd = [['display'], ['&']]
        elif os.uname()[0] == 'Darwin':
            cmd = [['open', '-a', 'Preview'], []]
        else:
            print('unsupported OS.')
            return None, None, None
    if conf is None:
        conf = {}
        for ext in 'png jpg jpeg miff pdf'.split(' '):
            conf[ext] = cmd
    if thr is None:
        thr = 3
    if shell is None:
        shell = False
    return conf, cmd, thr, shell


def main(files, verbose, simul):
    conf, cmd, thr, shell = get_config(verbose)
    if cmd is None:
        return
    images = []
    for fy in files:
        ext = fy[fy.rfind('.')+1:].lower()
        if ext in conf:
            images.append(fy)
    if len(images) > thr:
        yn = input('open files: {}\tOK? (y/[n])'.format(len(images)))
        if yn != 'y':
            return
    else:
        print('open files: {}'.format(len(images)))

    if simul:
        if shell:
            images = ' '.join(map(lambda x: x.replace(' ', '\ '), images))
            cmds = ' '.join(cmd[0]+[images]+cmd[1])
        else:
            cmds = cmd[0]+images+cmd[1]
        print_verbose(f'run "{cmds}"', verbose)
        subprocess.call(cmds, shell=shell)
    else:
        for im in images:
            ext = im[im.rfind('.')+1:].lower()
            cur_cmd = conf[ext]
            if len(cur_cmd) != 2:
                cur_cmd = cmd
            if shell:
                im = im.replace(' ', '\ ')
                cmds = ' '.join(cur_cmd[0]+[im]+cur_cmd[1])
            else:
                cmds = cur_cmd[0]+[im]+cur_cmd[1]
            print_verbose(f'run "{cmds}"', verbose)
            judge = subprocess.call(cmds, shell=shell)
            if judge != 0:
                print('failed to open: {}'.format(im))
                break


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('figs', help="shown figures", nargs='*')
    parser.add_argument('-n', dest='num', type=int,
                        help='number of showing figures')
    parser.add_argument('-s', '--simultaneously', action='store_true',
                        help='open files simultaneously')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='show verbose messages')

    args = parser.parse_args()
    if len(args.figs) == 0:
        files = glob.glob('./*')
    else:
        files = []
        for fig in args.figs:
            if os.path.isdir(fig):
                files += glob.glob(os.path.join(fig, '*'))
            elif os.path.isfile(fig):
                files.append(fig)
            else:
                print('{} not found.'.format(fig))
    if hasattr(args, 'num'):
        files = files[:args.num]

    main(files, args.verbose, args.simultaneously)
