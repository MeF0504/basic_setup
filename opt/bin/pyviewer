#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set filetype=python:

from __future__ import print_function

import os
import argparse
import tarfile

#function to show the constitution of hdf5 file.
def main_hdf5(fpath, args):
    import h5py
    def print_data(name, obj):
        if isinstance(obj, h5py.Dataset):
            print(name)
            if args.verbose:
                with h5py.File(args.file, 'r') as f:
                    print(" >>>  {}".format(f[name][()]))

    with h5py.File(fpath, 'r') as f:
        if hasattr(args, 'key') and args.key is not None:
            print(f[args.key][()])
        else:
            # https://qiita.com/skotaro/items/873507dc8f8f967bbc03
            f.visititems(print_data)

def main_pickle(fpath, args):
    import pickle
    with open(fpath, 'rb') as f:
        try:
            data = pickle.load(f)
        except UnicodeDecodeError:
            data = pickle.load(f, encoding='latin1')

    if type(data) == type(dict()):
        if hasattr(args, 'key') and args.key is not None:
            print(data[args.key])
        else:
            try:
                tmp_keys = sorted(data.keys())
            except TypeError:
                tmp_keys = data.keys()
            for key in tmp_keys:
                print(key)
                if args.verbose:
                    print(' >>> {}'.format(data[key]))
                else:
                    print('  type   : {}'.format(type(data[key]).__name__))
                    if hasattr(data[key], '__len__'):
                        print('  length : {}'.format(len(data[key])))
    else:
        print(data)

def main_numpy(fpath, args):
    import numpy as np
    data = np.load(fpath)
    if args.verbose:
        print(data)
    else:
        d_mean = np.mean(data)
        d_max = np.max(data)
        d_min = np.min(data)
        if np.isnan(d_mean):
            d_mean = np.nanmean(data)
            d_max = np.nanmax(data)
            d_min = np.nanmin(data)
            nan_rate = 1 - np.sum(data==data)/np.prod(data.shape)
        prt_str = '''
shape : {}
mean : {}
max : {}
min : {} '''.format(data.shape, d_mean, d_max, d_min)
        if 'nan_rate' in locals():
            prt_str += '\nnan rate : {:.1f}%'.format(nan_rate*100)

        print(prt_str)

def main_tar(fpath, args):
    if not tarfile.is_tarfile(fpath):
        print('{} is not a tar file.'.format(fpath))
        return
    with tarfile.open(fpath, 'r:*') as tar:
        if hasattr(args, 'key') and args.key is not None:
            try:
                for line in tar.extractfile(args.key):
                    print(line.decode(), end='')
            except Exception as e:
                print('Error!! {}'.format(e))
                print("{} can't open.".format(args.key))
                return
            print('')
        else:
            tar.list(verbose=args.verbose)

def main_zip(fpath, args):
    import zipfile
    with zipfile.ZipFile(fpath, 'r') as zip_files:
        if hasattr(args, 'key') and args.key is not None:
            try:
                for line in zip_files.open(args.key, 'r'):
                    print(line.decode(), end='')
            except Exception as e:
                print('Error!! {}'.format(e))
                print("{} can't open.".format(args.key))
                return
        elif args.verbose:
            zip_files.printdir()
        else:
            for zfile in zip_files.namelist():
                print(zfile)

def main_sqlite3(fpath, args):
    import sqlite3
    try:
        from tabulate import tabulate
        is_tabulate = True
    except ImportError:
        print("I can't find tabulate library.")
        is_tabulate = False

    def table_info_simple(table):
        cursor.execute("pragma table_info('%s')" % table)
        table_info = cursor.fetchall()
        for tinfo in table_info:
            if tinfo[2] == '':
                ctype = 'none'
            else:
                ctype = tinfo[2]
            print('  | %s [ %s ]' % (tinfo[1], ctype))

    def table_info_verbose(table):
        cursor.execute("pragma table_info('%s')" % table)
        table_info = cursor.fetchall()
        headers = []
        for tinfo in table_info:
            headers.append(tinfo[1])
        cursor.execute('select * from %s' % table)
        column = cursor.fetchall()
        table = []
        for clm in column:
            table.append([])
            for item in clm:
                table[-1].append(item)

        if is_tabulate:
            shift = '  '
            table_str = tabulate(table, headers, tablefmt='github')
            table_str = table_str.replace('\n', '\n'+shift)
            print(shift + table_str)
        else:
            print('  |', end='')
            for hd in headers:
                print(' %s |' % hd, end='')
            print('')
            for itms in table:
                print('  |', end='')
                for itm in itms:
                    print(' %s |' % itm, end='')
                print('')

    database = sqlite3.connect(fpath)
    cursor = database.cursor()
    cursor.execute("select name from sqlite_master where type='table'")
    tables = cursor.fetchall()
    if hasattr(args, 'key') and args.key is not None:
        print(args.key)
        table_info_verbose(args.key)
        return
    for tb in tables:
        table = tb[0]
        print(table)
        if args.verbose:
            table_info_verbose(table)
        else:
            table_info_simple(table)

def main(args):

    fpath = os.path.expanduser(args.file)
    if not os.path.exists(fpath):
        print("file doesn't exists!")
        return

    if not hasattr(args, 'type') or (args.type is None):
        ext = fpath[fpath.rfind('.')+1:]
        if ext == 'hdf5':
            args.type = 'hdf5'
        elif ext == 'pkl' or ext == 'pickle':
            args.type = 'pickle'
        elif ext == 'npy':
            args.type = 'numpy'
        elif tarfile.is_tarfile(fpath):
            args.type = 'tar'
        elif ext == 'zip':
            args.type = 'zip'
        elif ext in 'db db3 sql sql3 sqlite sqlite3'.split(' '):
            args.type = 'sqlite3'
        elif ext == 'py':
            if 'ja_JP' in os.environ['LANG']:
                print('vimでも使ってろ！')
            else:
                print("Why Don't you use vim???")
            return

    if args.type == 'hdf5':
        main_hdf5(fpath, args)
    elif args.type == 'pickle':
        main_pickle(fpath, args)
    elif args.type == 'numpy':
        main_numpy(fpath, args)
    elif args.type == 'tar':
        main_tar(fpath, args)
    elif args.type == 'zip':
        main_zip(fpath, args)
    elif args.type == 'sqlite3':
        main_sqlite3(fpath, args)
    else:
        print('this file is not supported.')

    return

if __name__ == "__main__":
    supported_type = 'hdf5 pickle numpy tar zip sqlite3'
    parser = argparse.ArgumentParser(description="show the constitution of file. supported file types ... " + supported_type.replace(' ', ', '))
    parser.add_argument('file', help='imput hdf5 file')
    parser.add_argument('-v', dest='verbose', action='store_true', help='show details')
    parser.add_argument('-t', '--type', dest='type', help='file type', choices=supported_type.split(' '))
    parser.add_argument('-k', '--key', dest='key', help='dictionary key name in pickle, Dataset name in hdf5, file name in tar/zip, or table name in sqlite3.')
    args = parser.parse_args()

    main(args)

