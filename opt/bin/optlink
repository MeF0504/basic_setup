#! /usr/bin/env python3

import os
import argparse
from pathlib import Path
import datetime
dt = datetime.datetime.today()
tdy = dt.strftime('%Y/%m/%d %H:%M:%S')

log_txt = []
log_path = None


def save_log(log):
    global log_path, log_txt
    if log_path is None:
        print(log)
    else:
        log_txt.append(log)


def mkdir(path):
    if not path.is_dir():
        save_log("mkdir {}".format(path))
        os.makedirs(path, mode=0o755)


def rmdir(path):
    if path.is_dir():
        if len(path.iterdir()) == 0:
            save_log("rmdir {}".format(path))
            os.removedirs(path)


def symlnk(s_file, t_file):
    if t_file.is_file():
        # check if t_file is link or not
        if str(t_file.resolve()) == str(t_file):
            # t_file is not symbolic link
            save_log("{} is already exist. {} isn't linked".format(t_file, s_file))
        else:
            # t_file is symbolic link
            save_log("unlink {} -> {} and link {}".format(t_file, str(Path(t_file).resolve()), s_file))

            os.unlink(t_file)
            os.symlink(s_file, t_file)

    else:
        save_log("link {} -> {}".format(s_file, t_file))
        os.symlink(s_file, t_file)


def main_link(args):
    sdir = os.path.abspath(args.source_dir)
    tdir = os.path.abspath(args.target_dir)
    save_log("\nmake time : {}".format(tdy))

    for cur, dirs, files in os.walk(sdir):
        save_log("\ncurrent: {}".format(cur))
        for fy in files:
            if log_path is not None and log_path.name in fy:
                # don't link log file
                continue
            s_file = Path(cur)/fy
            t_file = Path(str(s_file).replace(sdir, tdir))
            symlnk(s_file, t_file)

        for di in dirs:
            t_curdir = Path(cur.replace(sdir, tdir))
            mkdir(t_curdir/di)


def main_unlink(args):
    tdir = os.path.abspath(args.target_dir)
    save_log("\nmake time : {}".format(tdy))

    for cur, dirs, files in os.walk(tdir, topdown=False):
        for fy in files:
            t_file = Path(cur)/fy
            if not t_file.is_file():
                save_log("\ncurrent: {}".format(cur))
                os.unlink(t_file)
                save_log("{} -> {} is a broken link. unlink this.".format(
                    t_file, t_file.resolve()))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""
link files in the target directory to the source directory
with keeping the tree structure.
or unlink all broken links in the target directory.
    """)
    parser.add_argument('-t', '--target_dir', help='target directory', required=True)
    ex_group = parser.add_mutually_exclusive_group(required=True)
    ex_group.add_argument('-s', '--source_dir', help='source directory')
    ex_group.add_argument('-u', '--unlink', help="unlink all broken links in target_dir.", action='store_true')
    parser.add_argument('--log_name', help="""
log file name. The log file is saved in the target directory.
If not specified, display log in stdout.""", default=None)
    args = parser.parse_args()

    if args.log_name is None:
        log_path = None
    else:
        log_path = Path(args.target_dir)/args.log_name
    print('log file: {}'.format(log_path))

    if not args.unlink:
        main_link(args)
    else:
        main_unlink(args)

    if log_path is not None:
        log_txt = '\n'.join(log_txt)
        with open(log_path, 'a') as f:
            f.write(log_txt)
