#! /usr/bin/env python3

import math
import argparse

import matplotlib.colors as mcolors
import matplotlib.pyplot as plt

def get_rgb(col_str):
    r = int(col_str[1:3], 16)
    g = int(col_str[3:5], 16)
    b = int(col_str[5:7], 16)
    return [r,g,b]

def bg_full(r, g, b):
    return '\x1b[48;2;{:d};{:d};{:d}m'.format(r, g, b)

def fg_full(r, g, b):
    return '\x1b[38;2;{:d};{:d};{:d}m'.format(r, g, b)
def clear():
    return '\x1b[0m'

def sort_col(cols, sort):
    import numpy as np
    names = np.array(list(cols.keys()), dtype=str)
    col_nums = []
    for name in names:
        if type(cols[name]) == str:
            r, g, b = get_rgb(cols[name])
        else:
            r, g, b = cols[name]
            r = int(r*255)
            g = int(g*255)
            b = int(b*255)
        if sort == 'red':
            col_nums.append(r)
        elif sort == 'blue':
            col_nums.append(g)
        elif sort == 'green':
            col_nums.append(b)
        elif sort == 'all':
            # col_nums.append(r*256*256+g*256+b)
            # col_nums.append(r+g+b)
            col_nums.append(r*0.299+g*0.587+b*0.114)
    idx = np.argsort(col_nums)
    return names[idx]

def main(args):
    cols = mcolors.get_named_colors_mapping()
    if args.sort is None:
        names = cols.keys()
    else:
        names = sort_col(cols, args.sort)

    """
    L = math.sqrt(len(cols))
    fig1 = plt.figure(figsize=(L/2., L/2.))
    ax11 = fig1.add_subplot(111)
    ax11.axis('off')
    ax11.set_xlim([0,1])
    ax11.set_ylim([0,1])
    for i,name in enumerate(cols):
        y = int(i/L)/L
        x = int(i-y*L*L)/L
        print(x, y)
        ax11.text(x, y, name, c=name)
    plt.show()
    # """

    for name in names:
        if type(cols[name]) == str:
            r, g, b = get_rgb(cols[name])
        else:
            r, g, b = cols[name]
            r = int(r*255)
            g = int(g*255)
            b = int(b*255)
        try:
            print('{}{}{} {}{}{} ({:d}:{:d}:{:d})'.format(
                fg_full(r, g, b), name, clear(),
                bg_full(r, g, b), name, clear(),
                r, g, b,
            ))
        except Exception:
            print('{}: failed to set color. {}'.format(name, cols[name]))

    # from https://gist.githubusercontent.com/lifepillar/09a44b8cf0f9397465614e622979107f/raw/24-bit-color.sh

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--sort', help='sort names by color.', choices=['red', 'blue', 'green', 'all'], default=None)
    args = parser.parse_args()
    main(args)


