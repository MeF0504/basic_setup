#! /usr/bin/env python3

import os
import sys
import argparse

try:
    import matplotlib.font_manager as fm
    import matplotlib.pyplot as plt
except ImportError as e:
    print('fail to import matplotlib.', file=sys.stderr)
    sys.exit(1)

def main(args):
    fonts = fm.findSystemFonts(fontpaths=args.dir, fontext=args.ext)

    if args.fig:
        font_names = []
        for font in fonts:
            try:
                font_name = fm.FontProperties(fname=font).get_name()
            except RuntimeError as e:
                print('fail to add font: {}'.format(font))
            else:
                if not font_name in font_names:
                    font_names.append(font_name)

        figs = []
        axes = []
        names_per_1page = 29
        L = int(len(font_names)/names_per_1page)+1
        for i in range(L):
            figs.append(plt.figure(figsize=(8,11)))
            axes.append(figs[i].add_axes((0,0,1,1)))
            for j in range(names_per_1page):
                index = i*names_per_1page+j
                if index >= len(font_names):
                    break
                font = font_names[index]
                axes[i].text(0.1, 0.9-0.03*j, 'font test', fontdict=dict( \
                        color='black', \
                        fontfamily=font, \
                        fontsize=14,
                    ))
                axes[i].text(0.5, 0.9-0.03*j, font, fontdict=dict( \
                        color='gray', \
                        fontsize=14,
                    ))

            axes[i].grid(False)
        plt.show()

    else:
        res = {}
        for ft in fonts:
            f_dir = os.path.dirname(ft)
            if f_dir in res:
                res[f_dir].append(os.path.basename(ft))
            else:
                res[f_dir] = [os.path.basename(ft)]

        for f_dir in sorted(res.keys()):
            print('@ {}'.format(f_dir))
            for font in sorted(res[f_dir]):
                print(font)
            print()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', dest='ext', help='specify the extension', type=str, default='ttf')
    parser.add_argument('-d', dest='dir', help='specify the directory of fonts', type=str)
    parser.add_argument('--fig', help='display fonts by figure.', action='store_true')
    args = parser.parse_args()

    main(args)

